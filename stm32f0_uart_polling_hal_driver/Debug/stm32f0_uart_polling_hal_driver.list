
stm32f0_uart_polling_hal_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a34  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002af4  08002af4  00003af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b94  08002b94  00004078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002b94  08002b94  00004078  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002b94  08002b94  00004078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b94  08002b94  00003b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b98  08002b98  00003b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08002b9c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000078  08002c14  00004078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08002c14  00004288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000072bc  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001412  00000000  00000000  0000b35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  0000c770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000471  00000000  00000000  0000cd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f66e  00000000  00000000  0000d1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008900  00000000  00000000  0001c81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b87d  00000000  00000000  0002511f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008099c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017fc  00000000  00000000  000809e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  000821dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002adc 	.word	0x08002adc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08002adc 	.word	0x08002adc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fa5a 	bl	80006f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f876 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f906 	bl	8000450 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000244:	f000 f8d4 	bl	80003f0 <MX_USART1_UART_Init>
  /* send welcome message */

  /* send msg data */
  /* size of data : sizeof(msg) - 1 (avoid sending null char) */
  /* maximum polling time : 100ms */
  HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, 100);
 8000248:	4930      	ldr	r1, [pc, #192]	@ (800030c <main+0xd8>)
 800024a:	4831      	ldr	r0, [pc, #196]	@ (8000310 <main+0xdc>)
 800024c:	2364      	movs	r3, #100	@ 0x64
 800024e:	221a      	movs	r2, #26
 8000250:	f001 fadc 	bl	800180c <HAL_UART_Transmit>
  while (1)
  {
	/* receive and store in rData */
	/* size of data : 1 byte */
	/* maximum polling time : 100ms */
	HAL_UART_Receive(&huart1, &rData, 1, 100);
 8000254:	492f      	ldr	r1, [pc, #188]	@ (8000314 <main+0xe0>)
 8000256:	482e      	ldr	r0, [pc, #184]	@ (8000310 <main+0xdc>)
 8000258:	2364      	movs	r3, #100	@ 0x64
 800025a:	2201      	movs	r2, #1
 800025c:	f001 fb76 	bl	800194c <HAL_UART_Receive>

	/* check received data */
	if(rData == '0')
 8000260:	4b2c      	ldr	r3, [pc, #176]	@ (8000314 <main+0xe0>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b30      	cmp	r3, #48	@ 0x30
 8000266:	d116      	bne.n	8000296 <main+0x62>
	{
		/* turn off LED */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000268:	2390      	movs	r3, #144	@ 0x90
 800026a:	05db      	lsls	r3, r3, #23
 800026c:	2200      	movs	r2, #0
 800026e:	2101      	movs	r1, #1
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fd06 	bl	8000c82 <HAL_GPIO_WritePin>

		/* make tx buffer */
		sprintf(tData, "LED turned off.\n");
 8000276:	4a28      	ldr	r2, [pc, #160]	@ (8000318 <main+0xe4>)
 8000278:	4b28      	ldr	r3, [pc, #160]	@ (800031c <main+0xe8>)
 800027a:	0011      	movs	r1, r2
 800027c:	0018      	movs	r0, r3
 800027e:	f001 ff91 	bl	80021a4 <siprintf>

		/* send data */
		HAL_UART_Transmit(&huart1, tData, 16, 100);
 8000282:	4926      	ldr	r1, [pc, #152]	@ (800031c <main+0xe8>)
 8000284:	4822      	ldr	r0, [pc, #136]	@ (8000310 <main+0xdc>)
 8000286:	2364      	movs	r3, #100	@ 0x64
 8000288:	2210      	movs	r2, #16
 800028a:	f001 fabf 	bl	800180c <HAL_UART_Transmit>

		/* reset data */
		rData = 0;
 800028e:	4b21      	ldr	r3, [pc, #132]	@ (8000314 <main+0xe0>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
 8000294:	e019      	b.n	80002ca <main+0x96>
	}
	else if(rData == '1')
 8000296:	4b1f      	ldr	r3, [pc, #124]	@ (8000314 <main+0xe0>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b31      	cmp	r3, #49	@ 0x31
 800029c:	d115      	bne.n	80002ca <main+0x96>
	{
		/* turn off LED */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800029e:	2390      	movs	r3, #144	@ 0x90
 80002a0:	05db      	lsls	r3, r3, #23
 80002a2:	2201      	movs	r2, #1
 80002a4:	2101      	movs	r1, #1
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fceb 	bl	8000c82 <HAL_GPIO_WritePin>

		/* make tx buffer */
		sprintf(tData, "LED turned on.\n");
 80002ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000320 <main+0xec>)
 80002ae:	4b1b      	ldr	r3, [pc, #108]	@ (800031c <main+0xe8>)
 80002b0:	0011      	movs	r1, r2
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 ff76 	bl	80021a4 <siprintf>

		/* send data */
		HAL_UART_Transmit(&huart1, tData, 15, 100);
 80002b8:	4918      	ldr	r1, [pc, #96]	@ (800031c <main+0xe8>)
 80002ba:	4815      	ldr	r0, [pc, #84]	@ (8000310 <main+0xdc>)
 80002bc:	2364      	movs	r3, #100	@ 0x64
 80002be:	220f      	movs	r2, #15
 80002c0:	f001 faa4 	bl	800180c <HAL_UART_Transmit>

		/* reset data */
		rData = 0;
 80002c4:	4b13      	ldr	r3, [pc, #76]	@ (8000314 <main+0xe0>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
	}


	/* check button pressed */
	if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)
 80002ca:	2390      	movs	r3, #144	@ 0x90
 80002cc:	05db      	lsls	r3, r3, #23
 80002ce:	2102      	movs	r1, #2
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fcb9 	bl	8000c48 <HAL_GPIO_ReadPin>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d1bc      	bne.n	8000254 <main+0x20>
	{
		/* increase counter */
		pressed_counter++;
 80002da:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <main+0xf0>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <main+0xf0>)
 80002e4:	701a      	strb	r2, [r3, #0]

		/* make tx buffer */
		sprintf(tData, "pressed : %3d\n", pressed_counter);
 80002e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000324 <main+0xf0>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	001a      	movs	r2, r3
 80002ec:	490e      	ldr	r1, [pc, #56]	@ (8000328 <main+0xf4>)
 80002ee:	4b0b      	ldr	r3, [pc, #44]	@ (800031c <main+0xe8>)
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 ff57 	bl	80021a4 <siprintf>

		/* send data */
		HAL_UART_Transmit(&huart1, tData, 14, 100);
 80002f6:	4909      	ldr	r1, [pc, #36]	@ (800031c <main+0xe8>)
 80002f8:	4805      	ldr	r0, [pc, #20]	@ (8000310 <main+0xdc>)
 80002fa:	2364      	movs	r3, #100	@ 0x64
 80002fc:	220e      	movs	r2, #14
 80002fe:	f001 fa85 	bl	800180c <HAL_UART_Transmit>

		/* for button bounce */
		HAL_Delay(200);
 8000302:	20c8      	movs	r0, #200	@ 0xc8
 8000304:	f000 fa58 	bl	80007b8 <HAL_Delay>
	HAL_UART_Receive(&huart1, &rData, 1, 100);
 8000308:	e7a4      	b.n	8000254 <main+0x20>
 800030a:	46c0      	nop			@ (mov r8, r8)
 800030c:	20000000 	.word	0x20000000
 8000310:	20000094 	.word	0x20000094
 8000314:	2000011c 	.word	0x2000011c
 8000318:	08002af4 	.word	0x08002af4
 800031c:	20000120 	.word	0x20000120
 8000320:	08002b08 	.word	0x08002b08
 8000324:	20000134 	.word	0x20000134
 8000328:	08002b18 	.word	0x08002b18

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b590      	push	{r4, r7, lr}
 800032e:	b095      	sub	sp, #84	@ 0x54
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	2420      	movs	r4, #32
 8000334:	193b      	adds	r3, r7, r4
 8000336:	0018      	movs	r0, r3
 8000338:	2330      	movs	r3, #48	@ 0x30
 800033a:	001a      	movs	r2, r3
 800033c:	2100      	movs	r1, #0
 800033e:	f001 ff53 	bl	80021e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000342:	2310      	movs	r3, #16
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	0018      	movs	r0, r3
 8000348:	2310      	movs	r3, #16
 800034a:	001a      	movs	r2, r3
 800034c:	2100      	movs	r1, #0
 800034e:	f001 ff4b 	bl	80021e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000352:	003b      	movs	r3, r7
 8000354:	0018      	movs	r0, r3
 8000356:	2310      	movs	r3, #16
 8000358:	001a      	movs	r2, r3
 800035a:	2100      	movs	r1, #0
 800035c:	f001 ff44 	bl	80021e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000360:	0021      	movs	r1, r4
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2201      	movs	r2, #1
 8000366:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2201      	movs	r2, #1
 800036c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2202      	movs	r2, #2
 8000372:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2280      	movs	r2, #128	@ 0x80
 8000378:	0252      	lsls	r2, r2, #9
 800037a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2280      	movs	r2, #128	@ 0x80
 8000380:	0352      	lsls	r2, r2, #13
 8000382:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2200      	movs	r2, #0
 8000388:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	187b      	adds	r3, r7, r1
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fc95 	bl	8000cbc <HAL_RCC_OscConfig>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000396:	f000 f8b3 	bl	8000500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	2110      	movs	r1, #16
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2207      	movs	r2, #7
 80003a0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2202      	movs	r2, #2
 80003a6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2101      	movs	r1, #1
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 ff99 	bl	80012f0 <HAL_RCC_ClockConfig>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003c2:	f000 f89d 	bl	8000500 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003c6:	003b      	movs	r3, r7
 80003c8:	2201      	movs	r2, #1
 80003ca:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003cc:	003b      	movs	r3, r7
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d2:	003b      	movs	r3, r7
 80003d4:	0018      	movs	r0, r3
 80003d6:	f001 f8f7 	bl	80015c8 <HAL_RCCEx_PeriphCLKConfig>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003de:	f000 f88f 	bl	8000500 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80003e2:	f001 f853 	bl	800148c <HAL_RCC_EnableCSS>
}
 80003e6:	46c0      	nop			@ (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b015      	add	sp, #84	@ 0x54
 80003ec:	bd90      	pop	{r4, r7, pc}
	...

080003f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f4:	4b14      	ldr	r3, [pc, #80]	@ (8000448 <MX_USART1_UART_Init+0x58>)
 80003f6:	4a15      	ldr	r2, [pc, #84]	@ (800044c <MX_USART1_UART_Init+0x5c>)
 80003f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003fa:	4b13      	ldr	r3, [pc, #76]	@ (8000448 <MX_USART1_UART_Init+0x58>)
 80003fc:	22e1      	movs	r2, #225	@ 0xe1
 80003fe:	0252      	lsls	r2, r2, #9
 8000400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000402:	4b11      	ldr	r3, [pc, #68]	@ (8000448 <MX_USART1_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000408:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <MX_USART1_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800040e:	4b0e      	ldr	r3, [pc, #56]	@ (8000448 <MX_USART1_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000414:	4b0c      	ldr	r3, [pc, #48]	@ (8000448 <MX_USART1_UART_Init+0x58>)
 8000416:	220c      	movs	r2, #12
 8000418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041a:	4b0b      	ldr	r3, [pc, #44]	@ (8000448 <MX_USART1_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000420:	4b09      	ldr	r3, [pc, #36]	@ (8000448 <MX_USART1_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000426:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <MX_USART1_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800042c:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <MX_USART1_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000432:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <MX_USART1_UART_Init+0x58>)
 8000434:	0018      	movs	r0, r3
 8000436:	f001 f995 	bl	8001764 <HAL_UART_Init>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800043e:	f000 f85f 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20000094 	.word	0x20000094
 800044c:	40013800 	.word	0x40013800

08000450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b089      	sub	sp, #36	@ 0x24
 8000454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	240c      	movs	r4, #12
 8000458:	193b      	adds	r3, r7, r4
 800045a:	0018      	movs	r0, r3
 800045c:	2314      	movs	r3, #20
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f001 fec1 	bl	80021e8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000466:	4b25      	ldr	r3, [pc, #148]	@ (80004fc <MX_GPIO_Init+0xac>)
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	4b24      	ldr	r3, [pc, #144]	@ (80004fc <MX_GPIO_Init+0xac>)
 800046c:	2180      	movs	r1, #128	@ 0x80
 800046e:	03c9      	lsls	r1, r1, #15
 8000470:	430a      	orrs	r2, r1
 8000472:	615a      	str	r2, [r3, #20]
 8000474:	4b21      	ldr	r3, [pc, #132]	@ (80004fc <MX_GPIO_Init+0xac>)
 8000476:	695a      	ldr	r2, [r3, #20]
 8000478:	2380      	movs	r3, #128	@ 0x80
 800047a:	03db      	lsls	r3, r3, #15
 800047c:	4013      	ands	r3, r2
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b1e      	ldr	r3, [pc, #120]	@ (80004fc <MX_GPIO_Init+0xac>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	4b1d      	ldr	r3, [pc, #116]	@ (80004fc <MX_GPIO_Init+0xac>)
 8000488:	2180      	movs	r1, #128	@ 0x80
 800048a:	0289      	lsls	r1, r1, #10
 800048c:	430a      	orrs	r2, r1
 800048e:	615a      	str	r2, [r3, #20]
 8000490:	4b1a      	ldr	r3, [pc, #104]	@ (80004fc <MX_GPIO_Init+0xac>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	2380      	movs	r3, #128	@ 0x80
 8000496:	029b      	lsls	r3, r3, #10
 8000498:	4013      	ands	r3, r2
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800049e:	2390      	movs	r3, #144	@ 0x90
 80004a0:	05db      	lsls	r3, r3, #23
 80004a2:	2200      	movs	r2, #0
 80004a4:	2101      	movs	r1, #1
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 fbeb 	bl	8000c82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2201      	movs	r2, #1
 80004b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2201      	movs	r2, #1
 80004b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004c4:	193a      	adds	r2, r7, r4
 80004c6:	2390      	movs	r3, #144	@ 0x90
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	0011      	movs	r1, r2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fa4b 	bl	8000968 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2202      	movs	r2, #2
 80004d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2201      	movs	r2, #1
 80004e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80004e4:	193a      	adds	r2, r7, r4
 80004e6:	2390      	movs	r3, #144	@ 0x90
 80004e8:	05db      	lsls	r3, r3, #23
 80004ea:	0011      	movs	r1, r2
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fa3b 	bl	8000968 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b009      	add	sp, #36	@ 0x24
 80004f8:	bd90      	pop	{r4, r7, pc}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	40021000 	.word	0x40021000

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000508:	46c0      	nop			@ (mov r8, r8)
 800050a:	e7fd      	b.n	8000508 <Error_Handler+0x8>

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <HAL_MspInit+0x44>)
 8000514:	699a      	ldr	r2, [r3, #24]
 8000516:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <HAL_MspInit+0x44>)
 8000518:	2101      	movs	r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	619a      	str	r2, [r3, #24]
 800051e:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <HAL_MspInit+0x44>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	2201      	movs	r2, #1
 8000524:	4013      	ands	r3, r2
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <HAL_MspInit+0x44>)
 800052c:	69da      	ldr	r2, [r3, #28]
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <HAL_MspInit+0x44>)
 8000530:	2180      	movs	r1, #128	@ 0x80
 8000532:	0549      	lsls	r1, r1, #21
 8000534:	430a      	orrs	r2, r1
 8000536:	61da      	str	r2, [r3, #28]
 8000538:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <HAL_MspInit+0x44>)
 800053a:	69da      	ldr	r2, [r3, #28]
 800053c:	2380      	movs	r3, #128	@ 0x80
 800053e:	055b      	lsls	r3, r3, #21
 8000540:	4013      	ands	r3, r2
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b002      	add	sp, #8
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b08b      	sub	sp, #44	@ 0x2c
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	2414      	movs	r4, #20
 800055e:	193b      	adds	r3, r7, r4
 8000560:	0018      	movs	r0, r3
 8000562:	2314      	movs	r3, #20
 8000564:	001a      	movs	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	f001 fe3e 	bl	80021e8 <memset>
  if(huart->Instance==USART1)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1c      	ldr	r2, [pc, #112]	@ (80005e4 <HAL_UART_MspInit+0x90>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d132      	bne.n	80005dc <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000576:	4b1c      	ldr	r3, [pc, #112]	@ (80005e8 <HAL_UART_MspInit+0x94>)
 8000578:	699a      	ldr	r2, [r3, #24]
 800057a:	4b1b      	ldr	r3, [pc, #108]	@ (80005e8 <HAL_UART_MspInit+0x94>)
 800057c:	2180      	movs	r1, #128	@ 0x80
 800057e:	01c9      	lsls	r1, r1, #7
 8000580:	430a      	orrs	r2, r1
 8000582:	619a      	str	r2, [r3, #24]
 8000584:	4b18      	ldr	r3, [pc, #96]	@ (80005e8 <HAL_UART_MspInit+0x94>)
 8000586:	699a      	ldr	r2, [r3, #24]
 8000588:	2380      	movs	r3, #128	@ 0x80
 800058a:	01db      	lsls	r3, r3, #7
 800058c:	4013      	ands	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <HAL_UART_MspInit+0x94>)
 8000594:	695a      	ldr	r2, [r3, #20]
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <HAL_UART_MspInit+0x94>)
 8000598:	2180      	movs	r1, #128	@ 0x80
 800059a:	0289      	lsls	r1, r1, #10
 800059c:	430a      	orrs	r2, r1
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <HAL_UART_MspInit+0x94>)
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	029b      	lsls	r3, r3, #10
 80005a8:	4013      	ands	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005ae:	0021      	movs	r1, r4
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	220c      	movs	r2, #12
 80005b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2202      	movs	r2, #2
 80005ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2203      	movs	r2, #3
 80005c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2201      	movs	r2, #1
 80005cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	187a      	adds	r2, r7, r1
 80005d0:	2390      	movs	r3, #144	@ 0x90
 80005d2:	05db      	lsls	r3, r3, #23
 80005d4:	0011      	movs	r1, r2
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 f9c6 	bl	8000968 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80005dc:	46c0      	nop			@ (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b00b      	add	sp, #44	@ 0x2c
 80005e2:	bd90      	pop	{r4, r7, pc}
 80005e4:	40013800 	.word	0x40013800
 80005e8:	40021000 	.word	0x40021000

080005ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80005f0:	f000 ffd0 	bl	8001594 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f4:	46c0      	nop			@ (mov r8, r8)
 80005f6:	e7fd      	b.n	80005f4 <NMI_Handler+0x8>

080005f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fc:	46c0      	nop			@ (mov r8, r8)
 80005fe:	e7fd      	b.n	80005fc <HardFault_Handler+0x4>

08000600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000604:	46c0      	nop			@ (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000618:	f000 f8b2 	bl	8000780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800062c:	4a14      	ldr	r2, [pc, #80]	@ (8000680 <_sbrk+0x5c>)
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <_sbrk+0x60>)
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000638:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <_sbrk+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000640:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <_sbrk+0x64>)
 8000642:	4a12      	ldr	r2, [pc, #72]	@ (800068c <_sbrk+0x68>)
 8000644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000646:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <_sbrk+0x64>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	18d3      	adds	r3, r2, r3
 800064e:	693a      	ldr	r2, [r7, #16]
 8000650:	429a      	cmp	r2, r3
 8000652:	d207      	bcs.n	8000664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000654:	f001 fdd0 	bl	80021f8 <__errno>
 8000658:	0003      	movs	r3, r0
 800065a:	220c      	movs	r2, #12
 800065c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800065e:	2301      	movs	r3, #1
 8000660:	425b      	negs	r3, r3
 8000662:	e009      	b.n	8000678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000664:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <_sbrk+0x64>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800066a:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <_sbrk+0x64>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	18d2      	adds	r2, r2, r3
 8000672:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <_sbrk+0x64>)
 8000674:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000676:	68fb      	ldr	r3, [r7, #12]
}
 8000678:	0018      	movs	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	b006      	add	sp, #24
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20001000 	.word	0x20001000
 8000684:	00000400 	.word	0x00000400
 8000688:	20000138 	.word	0x20000138
 800068c:	20000288 	.word	0x20000288

08000690 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800069c:	480d      	ldr	r0, [pc, #52]	@ (80006d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a0:	f7ff fff6 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	@ (80006d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	@ (80006dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	@ (80006e0 <LoopForever+0xe>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	@ (80006e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	@ (80006e8 <LoopForever+0x16>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ca:	f001 fd9b 	bl	8002204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff fdb1 	bl	8000234 <main>

080006d2 <LoopForever>:

LoopForever:
    b LoopForever
 80006d2:	e7fe      	b.n	80006d2 <LoopForever>
  ldr   r0, =_estack
 80006d4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80006e0:	08002b9c 	.word	0x08002b9c
  ldr r2, =_sbss
 80006e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80006e8:	20000288 	.word	0x20000288

080006ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_IRQHandler>
	...

080006f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <HAL_Init+0x24>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <HAL_Init+0x24>)
 80006fa:	2110      	movs	r1, #16
 80006fc:	430a      	orrs	r2, r1
 80006fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f809 	bl	8000718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000706:	f7ff ff01 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070a:	2300      	movs	r3, #0
}
 800070c:	0018      	movs	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	40022000 	.word	0x40022000

08000718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <HAL_InitTick+0x5c>)
 8000722:	681c      	ldr	r4, [r3, #0]
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <HAL_InitTick+0x60>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	0019      	movs	r1, r3
 800072a:	23fa      	movs	r3, #250	@ 0xfa
 800072c:	0098      	lsls	r0, r3, #2
 800072e:	f7ff fcf5 	bl	800011c <__udivsi3>
 8000732:	0003      	movs	r3, r0
 8000734:	0019      	movs	r1, r3
 8000736:	0020      	movs	r0, r4
 8000738:	f7ff fcf0 	bl	800011c <__udivsi3>
 800073c:	0003      	movs	r3, r0
 800073e:	0018      	movs	r0, r3
 8000740:	f000 f905 	bl	800094e <HAL_SYSTICK_Config>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000748:	2301      	movs	r3, #1
 800074a:	e00f      	b.n	800076c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d80b      	bhi.n	800076a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	2301      	movs	r3, #1
 8000756:	425b      	negs	r3, r3
 8000758:	2200      	movs	r2, #0
 800075a:	0018      	movs	r0, r3
 800075c:	f000 f8e2 	bl	8000924 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_InitTick+0x64>)
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	e000      	b.n	800076c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
}
 800076c:	0018      	movs	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	b003      	add	sp, #12
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	2000001c 	.word	0x2000001c
 8000778:	20000024 	.word	0x20000024
 800077c:	20000020 	.word	0x20000020

08000780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <HAL_IncTick+0x1c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	001a      	movs	r2, r3
 800078a:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <HAL_IncTick+0x20>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	18d2      	adds	r2, r2, r3
 8000790:	4b03      	ldr	r3, [pc, #12]	@ (80007a0 <HAL_IncTick+0x20>)
 8000792:	601a      	str	r2, [r3, #0]
}
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	20000024 	.word	0x20000024
 80007a0:	2000013c 	.word	0x2000013c

080007a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b02      	ldr	r3, [pc, #8]	@ (80007b4 <HAL_GetTick+0x10>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	2000013c 	.word	0x2000013c

080007b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c0:	f7ff fff0 	bl	80007a4 <HAL_GetTick>
 80007c4:	0003      	movs	r3, r0
 80007c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	d005      	beq.n	80007de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d2:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <HAL_Delay+0x44>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	001a      	movs	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	189b      	adds	r3, r3, r2
 80007dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	f7ff ffe0 	bl	80007a4 <HAL_GetTick>
 80007e4:	0002      	movs	r2, r0
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d8f7      	bhi.n	80007e0 <HAL_Delay+0x28>
  {
  }
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b004      	add	sp, #16
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	20000024 	.word	0x20000024

08000800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	0002      	movs	r2, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b7f      	cmp	r3, #127	@ 0x7f
 8000814:	d828      	bhi.n	8000868 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000816:	4a2f      	ldr	r2, [pc, #188]	@ (80008d4 <__NVIC_SetPriority+0xd4>)
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b25b      	sxtb	r3, r3
 800081e:	089b      	lsrs	r3, r3, #2
 8000820:	33c0      	adds	r3, #192	@ 0xc0
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	589b      	ldr	r3, [r3, r2]
 8000826:	1dfa      	adds	r2, r7, #7
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	0011      	movs	r1, r2
 800082c:	2203      	movs	r2, #3
 800082e:	400a      	ands	r2, r1
 8000830:	00d2      	lsls	r2, r2, #3
 8000832:	21ff      	movs	r1, #255	@ 0xff
 8000834:	4091      	lsls	r1, r2
 8000836:	000a      	movs	r2, r1
 8000838:	43d2      	mvns	r2, r2
 800083a:	401a      	ands	r2, r3
 800083c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	019b      	lsls	r3, r3, #6
 8000842:	22ff      	movs	r2, #255	@ 0xff
 8000844:	401a      	ands	r2, r3
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	0018      	movs	r0, r3
 800084c:	2303      	movs	r3, #3
 800084e:	4003      	ands	r3, r0
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000854:	481f      	ldr	r0, [pc, #124]	@ (80008d4 <__NVIC_SetPriority+0xd4>)
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b25b      	sxtb	r3, r3
 800085c:	089b      	lsrs	r3, r3, #2
 800085e:	430a      	orrs	r2, r1
 8000860:	33c0      	adds	r3, #192	@ 0xc0
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000866:	e031      	b.n	80008cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000868:	4a1b      	ldr	r2, [pc, #108]	@ (80008d8 <__NVIC_SetPriority+0xd8>)
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	0019      	movs	r1, r3
 8000870:	230f      	movs	r3, #15
 8000872:	400b      	ands	r3, r1
 8000874:	3b08      	subs	r3, #8
 8000876:	089b      	lsrs	r3, r3, #2
 8000878:	3306      	adds	r3, #6
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	18d3      	adds	r3, r2, r3
 800087e:	3304      	adds	r3, #4
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	1dfa      	adds	r2, r7, #7
 8000884:	7812      	ldrb	r2, [r2, #0]
 8000886:	0011      	movs	r1, r2
 8000888:	2203      	movs	r2, #3
 800088a:	400a      	ands	r2, r1
 800088c:	00d2      	lsls	r2, r2, #3
 800088e:	21ff      	movs	r1, #255	@ 0xff
 8000890:	4091      	lsls	r1, r2
 8000892:	000a      	movs	r2, r1
 8000894:	43d2      	mvns	r2, r2
 8000896:	401a      	ands	r2, r3
 8000898:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	019b      	lsls	r3, r3, #6
 800089e:	22ff      	movs	r2, #255	@ 0xff
 80008a0:	401a      	ands	r2, r3
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	0018      	movs	r0, r3
 80008a8:	2303      	movs	r3, #3
 80008aa:	4003      	ands	r3, r0
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b0:	4809      	ldr	r0, [pc, #36]	@ (80008d8 <__NVIC_SetPriority+0xd8>)
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	001c      	movs	r4, r3
 80008b8:	230f      	movs	r3, #15
 80008ba:	4023      	ands	r3, r4
 80008bc:	3b08      	subs	r3, #8
 80008be:	089b      	lsrs	r3, r3, #2
 80008c0:	430a      	orrs	r2, r1
 80008c2:	3306      	adds	r3, #6
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	18c3      	adds	r3, r0, r3
 80008c8:	3304      	adds	r3, #4
 80008ca:	601a      	str	r2, [r3, #0]
}
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b003      	add	sp, #12
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	e000e100 	.word	0xe000e100
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	1e5a      	subs	r2, r3, #1
 80008e8:	2380      	movs	r3, #128	@ 0x80
 80008ea:	045b      	lsls	r3, r3, #17
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d301      	bcc.n	80008f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f0:	2301      	movs	r3, #1
 80008f2:	e010      	b.n	8000916 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <SysTick_Config+0x44>)
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	3a01      	subs	r2, #1
 80008fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008fc:	2301      	movs	r3, #1
 80008fe:	425b      	negs	r3, r3
 8000900:	2103      	movs	r1, #3
 8000902:	0018      	movs	r0, r3
 8000904:	f7ff ff7c 	bl	8000800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000908:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <SysTick_Config+0x44>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800090e:	4b04      	ldr	r3, [pc, #16]	@ (8000920 <SysTick_Config+0x44>)
 8000910:	2207      	movs	r2, #7
 8000912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000914:	2300      	movs	r3, #0
}
 8000916:	0018      	movs	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	b002      	add	sp, #8
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	e000e010 	.word	0xe000e010

08000924 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	210f      	movs	r1, #15
 8000930:	187b      	adds	r3, r7, r1
 8000932:	1c02      	adds	r2, r0, #0
 8000934:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	187b      	adds	r3, r7, r1
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	b25b      	sxtb	r3, r3
 800093e:	0011      	movs	r1, r2
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff ff5d 	bl	8000800 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b004      	add	sp, #16
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff ffbf 	bl	80008dc <SysTick_Config>
 800095e:	0003      	movs	r3, r0
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}

08000968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000976:	e14f      	b.n	8000c18 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2101      	movs	r1, #1
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	4091      	lsls	r1, r2
 8000982:	000a      	movs	r2, r1
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d100      	bne.n	8000990 <HAL_GPIO_Init+0x28>
 800098e:	e140      	b.n	8000c12 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	2203      	movs	r2, #3
 8000996:	4013      	ands	r3, r2
 8000998:	2b01      	cmp	r3, #1
 800099a:	d005      	beq.n	80009a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2203      	movs	r2, #3
 80009a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d130      	bne.n	8000a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	2203      	movs	r2, #3
 80009b4:	409a      	lsls	r2, r3
 80009b6:	0013      	movs	r3, r2
 80009b8:	43da      	mvns	r2, r3
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68da      	ldr	r2, [r3, #12]
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	409a      	lsls	r2, r3
 80009ca:	0013      	movs	r3, r2
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009de:	2201      	movs	r2, #1
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
 80009e4:	0013      	movs	r3, r2
 80009e6:	43da      	mvns	r2, r3
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	091b      	lsrs	r3, r3, #4
 80009f4:	2201      	movs	r2, #1
 80009f6:	401a      	ands	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	409a      	lsls	r2, r3
 80009fc:	0013      	movs	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	2203      	movs	r2, #3
 8000a10:	4013      	ands	r3, r2
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d017      	beq.n	8000a46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2203      	movs	r2, #3
 8000a22:	409a      	lsls	r2, r3
 8000a24:	0013      	movs	r3, r2
 8000a26:	43da      	mvns	r2, r3
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	689a      	ldr	r2, [r3, #8]
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	409a      	lsls	r2, r3
 8000a38:	0013      	movs	r3, r2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d123      	bne.n	8000a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	08da      	lsrs	r2, r3, #3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3208      	adds	r2, #8
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	58d3      	ldr	r3, [r2, r3]
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	2207      	movs	r2, #7
 8000a64:	4013      	ands	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	220f      	movs	r2, #15
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	691a      	ldr	r2, [r3, #16]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	2107      	movs	r1, #7
 8000a7e:	400b      	ands	r3, r1
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	409a      	lsls	r2, r3
 8000a84:	0013      	movs	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	08da      	lsrs	r2, r3, #3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3208      	adds	r2, #8
 8000a94:	0092      	lsls	r2, r2, #2
 8000a96:	6939      	ldr	r1, [r7, #16]
 8000a98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	409a      	lsls	r2, r3
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	401a      	ands	r2, r3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	23c0      	movs	r3, #192	@ 0xc0
 8000ad4:	029b      	lsls	r3, r3, #10
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	d100      	bne.n	8000adc <HAL_GPIO_Init+0x174>
 8000ada:	e09a      	b.n	8000c12 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000adc:	4b54      	ldr	r3, [pc, #336]	@ (8000c30 <HAL_GPIO_Init+0x2c8>)
 8000ade:	699a      	ldr	r2, [r3, #24]
 8000ae0:	4b53      	ldr	r3, [pc, #332]	@ (8000c30 <HAL_GPIO_Init+0x2c8>)
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	619a      	str	r2, [r3, #24]
 8000ae8:	4b51      	ldr	r3, [pc, #324]	@ (8000c30 <HAL_GPIO_Init+0x2c8>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	2201      	movs	r2, #1
 8000aee:	4013      	ands	r3, r2
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000af4:	4a4f      	ldr	r2, [pc, #316]	@ (8000c34 <HAL_GPIO_Init+0x2cc>)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	589b      	ldr	r3, [r3, r2]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	2203      	movs	r2, #3
 8000b06:	4013      	ands	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	0013      	movs	r3, r2
 8000b10:	43da      	mvns	r2, r3
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	2390      	movs	r3, #144	@ 0x90
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d013      	beq.n	8000b4a <HAL_GPIO_Init+0x1e2>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a44      	ldr	r2, [pc, #272]	@ (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d00d      	beq.n	8000b46 <HAL_GPIO_Init+0x1de>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a43      	ldr	r2, [pc, #268]	@ (8000c3c <HAL_GPIO_Init+0x2d4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d007      	beq.n	8000b42 <HAL_GPIO_Init+0x1da>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a42      	ldr	r2, [pc, #264]	@ (8000c40 <HAL_GPIO_Init+0x2d8>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d101      	bne.n	8000b3e <HAL_GPIO_Init+0x1d6>
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	e006      	b.n	8000b4c <HAL_GPIO_Init+0x1e4>
 8000b3e:	2305      	movs	r3, #5
 8000b40:	e004      	b.n	8000b4c <HAL_GPIO_Init+0x1e4>
 8000b42:	2302      	movs	r3, #2
 8000b44:	e002      	b.n	8000b4c <HAL_GPIO_Init+0x1e4>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <HAL_GPIO_Init+0x1e4>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	2103      	movs	r1, #3
 8000b50:	400a      	ands	r2, r1
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	4093      	lsls	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b5c:	4935      	ldr	r1, [pc, #212]	@ (8000c34 <HAL_GPIO_Init+0x2cc>)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	3302      	adds	r3, #2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b6a:	4b36      	ldr	r3, [pc, #216]	@ (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	43da      	mvns	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	2380      	movs	r3, #128	@ 0x80
 8000b80:	035b      	lsls	r3, r3, #13
 8000b82:	4013      	ands	r3, r2
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b94:	4b2b      	ldr	r3, [pc, #172]	@ (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	43da      	mvns	r2, r3
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	2380      	movs	r3, #128	@ 0x80
 8000baa:	039b      	lsls	r3, r3, #14
 8000bac:	4013      	ands	r3, r2
 8000bae:	d003      	beq.n	8000bb8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	2380      	movs	r3, #128	@ 0x80
 8000bd4:	029b      	lsls	r3, r3, #10
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000be2:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000be8:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43da      	mvns	r2, r3
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	2380      	movs	r3, #128	@ 0x80
 8000bfe:	025b      	lsls	r3, r3, #9
 8000c00:	4013      	ands	r3, r2
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	40da      	lsrs	r2, r3
 8000c20:	1e13      	subs	r3, r2, #0
 8000c22:	d000      	beq.n	8000c26 <HAL_GPIO_Init+0x2be>
 8000c24:	e6a8      	b.n	8000978 <HAL_GPIO_Init+0x10>
  } 
}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b006      	add	sp, #24
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010000 	.word	0x40010000
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	48000800 	.word	0x48000800
 8000c40:	48000c00 	.word	0x48000c00
 8000c44:	40010400 	.word	0x40010400

08000c48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	000a      	movs	r2, r1
 8000c52:	1cbb      	adds	r3, r7, #2
 8000c54:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	1cba      	adds	r2, r7, #2
 8000c5c:	8812      	ldrh	r2, [r2, #0]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	d004      	beq.n	8000c6c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000c62:	230f      	movs	r3, #15
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	e003      	b.n	8000c74 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000c74:	230f      	movs	r3, #15
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	781b      	ldrb	r3, [r3, #0]
  }
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b004      	add	sp, #16
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	0008      	movs	r0, r1
 8000c8c:	0011      	movs	r1, r2
 8000c8e:	1cbb      	adds	r3, r7, #2
 8000c90:	1c02      	adds	r2, r0, #0
 8000c92:	801a      	strh	r2, [r3, #0]
 8000c94:	1c7b      	adds	r3, r7, #1
 8000c96:	1c0a      	adds	r2, r1, #0
 8000c98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c9a:	1c7b      	adds	r3, r7, #1
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d004      	beq.n	8000cac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ca2:	1cbb      	adds	r3, r7, #2
 8000ca4:	881a      	ldrh	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000caa:	e003      	b.n	8000cb4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cac:	1cbb      	adds	r3, r7, #2
 8000cae:	881a      	ldrh	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e301      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d100      	bne.n	8000cda <HAL_RCC_OscConfig+0x1e>
 8000cd8:	e08d      	b.n	8000df6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cda:	4bc3      	ldr	r3, [pc, #780]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	220c      	movs	r2, #12
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	d00e      	beq.n	8000d04 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce6:	4bc0      	ldr	r3, [pc, #768]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	220c      	movs	r2, #12
 8000cec:	4013      	ands	r3, r2
 8000cee:	2b08      	cmp	r3, #8
 8000cf0:	d116      	bne.n	8000d20 <HAL_RCC_OscConfig+0x64>
 8000cf2:	4bbd      	ldr	r3, [pc, #756]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	2380      	movs	r3, #128	@ 0x80
 8000cf8:	025b      	lsls	r3, r3, #9
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	2380      	movs	r3, #128	@ 0x80
 8000cfe:	025b      	lsls	r3, r3, #9
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d10d      	bne.n	8000d20 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d04:	4bb8      	ldr	r3, [pc, #736]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	2380      	movs	r3, #128	@ 0x80
 8000d0a:	029b      	lsls	r3, r3, #10
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	d100      	bne.n	8000d12 <HAL_RCC_OscConfig+0x56>
 8000d10:	e070      	b.n	8000df4 <HAL_RCC_OscConfig+0x138>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d000      	beq.n	8000d1c <HAL_RCC_OscConfig+0x60>
 8000d1a:	e06b      	b.n	8000df4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e2d8      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d107      	bne.n	8000d38 <HAL_RCC_OscConfig+0x7c>
 8000d28:	4baf      	ldr	r3, [pc, #700]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4bae      	ldr	r3, [pc, #696]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d2e:	2180      	movs	r1, #128	@ 0x80
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	430a      	orrs	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	e02f      	b.n	8000d98 <HAL_RCC_OscConfig+0xdc>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10c      	bne.n	8000d5a <HAL_RCC_OscConfig+0x9e>
 8000d40:	4ba9      	ldr	r3, [pc, #676]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4ba8      	ldr	r3, [pc, #672]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d46:	49a9      	ldr	r1, [pc, #676]	@ (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d48:	400a      	ands	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	4ba6      	ldr	r3, [pc, #664]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4ba5      	ldr	r3, [pc, #660]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d52:	49a7      	ldr	r1, [pc, #668]	@ (8000ff0 <HAL_RCC_OscConfig+0x334>)
 8000d54:	400a      	ands	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	e01e      	b.n	8000d98 <HAL_RCC_OscConfig+0xdc>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b05      	cmp	r3, #5
 8000d60:	d10e      	bne.n	8000d80 <HAL_RCC_OscConfig+0xc4>
 8000d62:	4ba1      	ldr	r3, [pc, #644]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4ba0      	ldr	r3, [pc, #640]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d68:	2180      	movs	r1, #128	@ 0x80
 8000d6a:	02c9      	lsls	r1, r1, #11
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	4b9d      	ldr	r3, [pc, #628]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b9c      	ldr	r3, [pc, #624]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d76:	2180      	movs	r1, #128	@ 0x80
 8000d78:	0249      	lsls	r1, r1, #9
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	e00b      	b.n	8000d98 <HAL_RCC_OscConfig+0xdc>
 8000d80:	4b99      	ldr	r3, [pc, #612]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b98      	ldr	r3, [pc, #608]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d86:	4999      	ldr	r1, [pc, #612]	@ (8000fec <HAL_RCC_OscConfig+0x330>)
 8000d88:	400a      	ands	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	4b96      	ldr	r3, [pc, #600]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b95      	ldr	r3, [pc, #596]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000d92:	4997      	ldr	r1, [pc, #604]	@ (8000ff0 <HAL_RCC_OscConfig+0x334>)
 8000d94:	400a      	ands	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d014      	beq.n	8000dca <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da0:	f7ff fd00 	bl	80007a4 <HAL_GetTick>
 8000da4:	0003      	movs	r3, r0
 8000da6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da8:	e008      	b.n	8000dbc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000daa:	f7ff fcfb 	bl	80007a4 <HAL_GetTick>
 8000dae:	0002      	movs	r2, r0
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b64      	cmp	r3, #100	@ 0x64
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e28a      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dbc:	4b8a      	ldr	r3, [pc, #552]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	2380      	movs	r3, #128	@ 0x80
 8000dc2:	029b      	lsls	r3, r3, #10
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	d0f0      	beq.n	8000daa <HAL_RCC_OscConfig+0xee>
 8000dc8:	e015      	b.n	8000df6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dca:	f7ff fceb 	bl	80007a4 <HAL_GetTick>
 8000dce:	0003      	movs	r3, r0
 8000dd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dd4:	f7ff fce6 	bl	80007a4 <HAL_GetTick>
 8000dd8:	0002      	movs	r2, r0
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b64      	cmp	r3, #100	@ 0x64
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e275      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de6:	4b80      	ldr	r3, [pc, #512]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	2380      	movs	r3, #128	@ 0x80
 8000dec:	029b      	lsls	r3, r3, #10
 8000dee:	4013      	ands	r3, r2
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x118>
 8000df2:	e000      	b.n	8000df6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d100      	bne.n	8000e02 <HAL_RCC_OscConfig+0x146>
 8000e00:	e069      	b.n	8000ed6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e02:	4b79      	ldr	r3, [pc, #484]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	220c      	movs	r2, #12
 8000e08:	4013      	ands	r3, r2
 8000e0a:	d00b      	beq.n	8000e24 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e0c:	4b76      	ldr	r3, [pc, #472]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	220c      	movs	r2, #12
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d11c      	bne.n	8000e52 <HAL_RCC_OscConfig+0x196>
 8000e18:	4b73      	ldr	r3, [pc, #460]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	2380      	movs	r3, #128	@ 0x80
 8000e1e:	025b      	lsls	r3, r3, #9
 8000e20:	4013      	ands	r3, r2
 8000e22:	d116      	bne.n	8000e52 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e24:	4b70      	ldr	r3, [pc, #448]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2202      	movs	r2, #2
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d005      	beq.n	8000e3a <HAL_RCC_OscConfig+0x17e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d001      	beq.n	8000e3a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e24b      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3a:	4b6b      	ldr	r3, [pc, #428]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	22f8      	movs	r2, #248	@ 0xf8
 8000e40:	4393      	bics	r3, r2
 8000e42:	0019      	movs	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	00da      	lsls	r2, r3, #3
 8000e4a:	4b67      	ldr	r3, [pc, #412]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e50:	e041      	b.n	8000ed6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d024      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e5a:	4b63      	ldr	r3, [pc, #396]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b62      	ldr	r3, [pc, #392]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000e60:	2101      	movs	r1, #1
 8000e62:	430a      	orrs	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e66:	f7ff fc9d 	bl	80007a4 <HAL_GetTick>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e70:	f7ff fc98 	bl	80007a4 <HAL_GetTick>
 8000e74:	0002      	movs	r2, r0
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e227      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e82:	4b59      	ldr	r3, [pc, #356]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2202      	movs	r2, #2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d0f1      	beq.n	8000e70 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8c:	4b56      	ldr	r3, [pc, #344]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	22f8      	movs	r2, #248	@ 0xf8
 8000e92:	4393      	bics	r3, r2
 8000e94:	0019      	movs	r1, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	00da      	lsls	r2, r3, #3
 8000e9c:	4b52      	ldr	r3, [pc, #328]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	e018      	b.n	8000ed6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ea4:	4b50      	ldr	r3, [pc, #320]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b4f      	ldr	r3, [pc, #316]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000eaa:	2101      	movs	r1, #1
 8000eac:	438a      	bics	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fc78 	bl	80007a4 <HAL_GetTick>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eba:	f7ff fc73 	bl	80007a4 <HAL_GetTick>
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e202      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ecc:	4b46      	ldr	r3, [pc, #280]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d1f1      	bne.n	8000eba <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2208      	movs	r2, #8
 8000edc:	4013      	ands	r3, r2
 8000ede:	d036      	beq.n	8000f4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d019      	beq.n	8000f1c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000eea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000eec:	4b3e      	ldr	r3, [pc, #248]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000eee:	2101      	movs	r1, #1
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef4:	f7ff fc56 	bl	80007a4 <HAL_GetTick>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efc:	e008      	b.n	8000f10 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000efe:	f7ff fc51 	bl	80007a4 <HAL_GetTick>
 8000f02:	0002      	movs	r2, r0
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e1e0      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f10:	4b35      	ldr	r3, [pc, #212]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f14:	2202      	movs	r2, #2
 8000f16:	4013      	ands	r3, r2
 8000f18:	d0f1      	beq.n	8000efe <HAL_RCC_OscConfig+0x242>
 8000f1a:	e018      	b.n	8000f4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f1c:	4b32      	ldr	r3, [pc, #200]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000f1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f20:	4b31      	ldr	r3, [pc, #196]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000f22:	2101      	movs	r1, #1
 8000f24:	438a      	bics	r2, r1
 8000f26:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f28:	f7ff fc3c 	bl	80007a4 <HAL_GetTick>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f32:	f7ff fc37 	bl	80007a4 <HAL_GetTick>
 8000f36:	0002      	movs	r2, r0
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e1c6      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f44:	4b28      	ldr	r3, [pc, #160]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f48:	2202      	movs	r2, #2
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d1f1      	bne.n	8000f32 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2204      	movs	r2, #4
 8000f54:	4013      	ands	r3, r2
 8000f56:	d100      	bne.n	8000f5a <HAL_RCC_OscConfig+0x29e>
 8000f58:	e0b4      	b.n	80010c4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f5a:	201f      	movs	r0, #31
 8000f5c:	183b      	adds	r3, r7, r0
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f62:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000f64:	69da      	ldr	r2, [r3, #28]
 8000f66:	2380      	movs	r3, #128	@ 0x80
 8000f68:	055b      	lsls	r3, r3, #21
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d110      	bne.n	8000f90 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000f70:	69da      	ldr	r2, [r3, #28]
 8000f72:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000f74:	2180      	movs	r1, #128	@ 0x80
 8000f76:	0549      	lsls	r1, r1, #21
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	61da      	str	r2, [r3, #28]
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	69da      	ldr	r2, [r3, #28]
 8000f80:	2380      	movs	r3, #128	@ 0x80
 8000f82:	055b      	lsls	r3, r3, #21
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f8a:	183b      	adds	r3, r7, r0
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f90:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2380      	movs	r3, #128	@ 0x80
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d11a      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000fa2:	2180      	movs	r1, #128	@ 0x80
 8000fa4:	0049      	lsls	r1, r1, #1
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fbfb 	bl	80007a4 <HAL_GetTick>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb4:	f7ff fbf6 	bl	80007a4 <HAL_GetTick>
 8000fb8:	0002      	movs	r2, r0
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b64      	cmp	r3, #100	@ 0x64
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e185      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	2380      	movs	r3, #128	@ 0x80
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d10e      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x33c>
 8000fda:	4b03      	ldr	r3, [pc, #12]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000fdc:	6a1a      	ldr	r2, [r3, #32]
 8000fde:	4b02      	ldr	r3, [pc, #8]	@ (8000fe8 <HAL_RCC_OscConfig+0x32c>)
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	621a      	str	r2, [r3, #32]
 8000fe6:	e035      	b.n	8001054 <HAL_RCC_OscConfig+0x398>
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	fffeffff 	.word	0xfffeffff
 8000ff0:	fffbffff 	.word	0xfffbffff
 8000ff4:	40007000 	.word	0x40007000
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10c      	bne.n	800101a <HAL_RCC_OscConfig+0x35e>
 8001000:	4bb6      	ldr	r3, [pc, #728]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001002:	6a1a      	ldr	r2, [r3, #32]
 8001004:	4bb5      	ldr	r3, [pc, #724]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001006:	2101      	movs	r1, #1
 8001008:	438a      	bics	r2, r1
 800100a:	621a      	str	r2, [r3, #32]
 800100c:	4bb3      	ldr	r3, [pc, #716]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800100e:	6a1a      	ldr	r2, [r3, #32]
 8001010:	4bb2      	ldr	r3, [pc, #712]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001012:	2104      	movs	r1, #4
 8001014:	438a      	bics	r2, r1
 8001016:	621a      	str	r2, [r3, #32]
 8001018:	e01c      	b.n	8001054 <HAL_RCC_OscConfig+0x398>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b05      	cmp	r3, #5
 8001020:	d10c      	bne.n	800103c <HAL_RCC_OscConfig+0x380>
 8001022:	4bae      	ldr	r3, [pc, #696]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001024:	6a1a      	ldr	r2, [r3, #32]
 8001026:	4bad      	ldr	r3, [pc, #692]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001028:	2104      	movs	r1, #4
 800102a:	430a      	orrs	r2, r1
 800102c:	621a      	str	r2, [r3, #32]
 800102e:	4bab      	ldr	r3, [pc, #684]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001030:	6a1a      	ldr	r2, [r3, #32]
 8001032:	4baa      	ldr	r3, [pc, #680]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001034:	2101      	movs	r1, #1
 8001036:	430a      	orrs	r2, r1
 8001038:	621a      	str	r2, [r3, #32]
 800103a:	e00b      	b.n	8001054 <HAL_RCC_OscConfig+0x398>
 800103c:	4ba7      	ldr	r3, [pc, #668]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800103e:	6a1a      	ldr	r2, [r3, #32]
 8001040:	4ba6      	ldr	r3, [pc, #664]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001042:	2101      	movs	r1, #1
 8001044:	438a      	bics	r2, r1
 8001046:	621a      	str	r2, [r3, #32]
 8001048:	4ba4      	ldr	r3, [pc, #656]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800104a:	6a1a      	ldr	r2, [r3, #32]
 800104c:	4ba3      	ldr	r3, [pc, #652]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800104e:	2104      	movs	r1, #4
 8001050:	438a      	bics	r2, r1
 8001052:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d014      	beq.n	8001086 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105c:	f7ff fba2 	bl	80007a4 <HAL_GetTick>
 8001060:	0003      	movs	r3, r0
 8001062:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001064:	e009      	b.n	800107a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001066:	f7ff fb9d 	bl	80007a4 <HAL_GetTick>
 800106a:	0002      	movs	r2, r0
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	4a9b      	ldr	r2, [pc, #620]	@ (80012e0 <HAL_RCC_OscConfig+0x624>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e12b      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107a:	4b98      	ldr	r3, [pc, #608]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	2202      	movs	r2, #2
 8001080:	4013      	ands	r3, r2
 8001082:	d0f0      	beq.n	8001066 <HAL_RCC_OscConfig+0x3aa>
 8001084:	e013      	b.n	80010ae <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001086:	f7ff fb8d 	bl	80007a4 <HAL_GetTick>
 800108a:	0003      	movs	r3, r0
 800108c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108e:	e009      	b.n	80010a4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001090:	f7ff fb88 	bl	80007a4 <HAL_GetTick>
 8001094:	0002      	movs	r2, r0
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	4a91      	ldr	r2, [pc, #580]	@ (80012e0 <HAL_RCC_OscConfig+0x624>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e116      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a4:	4b8d      	ldr	r3, [pc, #564]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	2202      	movs	r2, #2
 80010aa:	4013      	ands	r3, r2
 80010ac:	d1f0      	bne.n	8001090 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010ae:	231f      	movs	r3, #31
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d105      	bne.n	80010c4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010b8:	4b88      	ldr	r3, [pc, #544]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 80010ba:	69da      	ldr	r2, [r3, #28]
 80010bc:	4b87      	ldr	r3, [pc, #540]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 80010be:	4989      	ldr	r1, [pc, #548]	@ (80012e4 <HAL_RCC_OscConfig+0x628>)
 80010c0:	400a      	ands	r2, r1
 80010c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2210      	movs	r2, #16
 80010ca:	4013      	ands	r3, r2
 80010cc:	d063      	beq.n	8001196 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d12a      	bne.n	800112c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010d6:	4b81      	ldr	r3, [pc, #516]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 80010d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010da:	4b80      	ldr	r3, [pc, #512]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 80010dc:	2104      	movs	r1, #4
 80010de:	430a      	orrs	r2, r1
 80010e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010e2:	4b7e      	ldr	r3, [pc, #504]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 80010e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010e6:	4b7d      	ldr	r3, [pc, #500]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	430a      	orrs	r2, r1
 80010ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ee:	f7ff fb59 	bl	80007a4 <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010f8:	f7ff fb54 	bl	80007a4 <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e0e3      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800110a:	4b74      	ldr	r3, [pc, #464]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800110c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800110e:	2202      	movs	r2, #2
 8001110:	4013      	ands	r3, r2
 8001112:	d0f1      	beq.n	80010f8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001114:	4b71      	ldr	r3, [pc, #452]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001118:	22f8      	movs	r2, #248	@ 0xf8
 800111a:	4393      	bics	r3, r2
 800111c:	0019      	movs	r1, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	00da      	lsls	r2, r3, #3
 8001124:	4b6d      	ldr	r3, [pc, #436]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001126:	430a      	orrs	r2, r1
 8001128:	635a      	str	r2, [r3, #52]	@ 0x34
 800112a:	e034      	b.n	8001196 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	3305      	adds	r3, #5
 8001132:	d111      	bne.n	8001158 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001134:	4b69      	ldr	r3, [pc, #420]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001138:	4b68      	ldr	r3, [pc, #416]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800113a:	2104      	movs	r1, #4
 800113c:	438a      	bics	r2, r1
 800113e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001140:	4b66      	ldr	r3, [pc, #408]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001144:	22f8      	movs	r2, #248	@ 0xf8
 8001146:	4393      	bics	r3, r2
 8001148:	0019      	movs	r1, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	00da      	lsls	r2, r3, #3
 8001150:	4b62      	ldr	r3, [pc, #392]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001152:	430a      	orrs	r2, r1
 8001154:	635a      	str	r2, [r3, #52]	@ 0x34
 8001156:	e01e      	b.n	8001196 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001158:	4b60      	ldr	r3, [pc, #384]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800115a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800115c:	4b5f      	ldr	r3, [pc, #380]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800115e:	2104      	movs	r1, #4
 8001160:	430a      	orrs	r2, r1
 8001162:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001164:	4b5d      	ldr	r3, [pc, #372]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001166:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001168:	4b5c      	ldr	r3, [pc, #368]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800116a:	2101      	movs	r1, #1
 800116c:	438a      	bics	r2, r1
 800116e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001170:	f7ff fb18 	bl	80007a4 <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800117a:	f7ff fb13 	bl	80007a4 <HAL_GetTick>
 800117e:	0002      	movs	r2, r0
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e0a2      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800118c:	4b53      	ldr	r3, [pc, #332]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800118e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001190:	2202      	movs	r2, #2
 8001192:	4013      	ands	r3, r2
 8001194:	d1f1      	bne.n	800117a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d100      	bne.n	80011a0 <HAL_RCC_OscConfig+0x4e4>
 800119e:	e097      	b.n	80012d0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a0:	4b4e      	ldr	r3, [pc, #312]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	220c      	movs	r2, #12
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d100      	bne.n	80011ae <HAL_RCC_OscConfig+0x4f2>
 80011ac:	e06b      	b.n	8001286 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d14c      	bne.n	8001250 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b6:	4b49      	ldr	r3, [pc, #292]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4b48      	ldr	r3, [pc, #288]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 80011bc:	494a      	ldr	r1, [pc, #296]	@ (80012e8 <HAL_RCC_OscConfig+0x62c>)
 80011be:	400a      	ands	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c2:	f7ff faef 	bl	80007a4 <HAL_GetTick>
 80011c6:	0003      	movs	r3, r0
 80011c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011cc:	f7ff faea 	bl	80007a4 <HAL_GetTick>
 80011d0:	0002      	movs	r2, r0
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e079      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011de:	4b3f      	ldr	r3, [pc, #252]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	2380      	movs	r3, #128	@ 0x80
 80011e4:	049b      	lsls	r3, r3, #18
 80011e6:	4013      	ands	r3, r2
 80011e8:	d1f0      	bne.n	80011cc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ea:	4b3c      	ldr	r3, [pc, #240]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 80011ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ee:	220f      	movs	r2, #15
 80011f0:	4393      	bics	r3, r2
 80011f2:	0019      	movs	r1, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011f8:	4b38      	ldr	r3, [pc, #224]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 80011fa:	430a      	orrs	r2, r1
 80011fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011fe:	4b37      	ldr	r3, [pc, #220]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4a3a      	ldr	r2, [pc, #232]	@ (80012ec <HAL_RCC_OscConfig+0x630>)
 8001204:	4013      	ands	r3, r2
 8001206:	0019      	movs	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001210:	431a      	orrs	r2, r3
 8001212:	4b32      	ldr	r3, [pc, #200]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001214:	430a      	orrs	r2, r1
 8001216:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001218:	4b30      	ldr	r3, [pc, #192]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b2f      	ldr	r3, [pc, #188]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800121e:	2180      	movs	r1, #128	@ 0x80
 8001220:	0449      	lsls	r1, r1, #17
 8001222:	430a      	orrs	r2, r1
 8001224:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001226:	f7ff fabd 	bl	80007a4 <HAL_GetTick>
 800122a:	0003      	movs	r3, r0
 800122c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001230:	f7ff fab8 	bl	80007a4 <HAL_GetTick>
 8001234:	0002      	movs	r2, r0
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e047      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001242:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	2380      	movs	r3, #128	@ 0x80
 8001248:	049b      	lsls	r3, r3, #18
 800124a:	4013      	ands	r3, r2
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x574>
 800124e:	e03f      	b.n	80012d0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001250:	4b22      	ldr	r3, [pc, #136]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001256:	4924      	ldr	r1, [pc, #144]	@ (80012e8 <HAL_RCC_OscConfig+0x62c>)
 8001258:	400a      	ands	r2, r1
 800125a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff faa2 	bl	80007a4 <HAL_GetTick>
 8001260:	0003      	movs	r3, r0
 8001262:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001266:	f7ff fa9d 	bl	80007a4 <HAL_GetTick>
 800126a:	0002      	movs	r2, r0
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e02c      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	049b      	lsls	r3, r3, #18
 8001280:	4013      	ands	r3, r2
 8001282:	d1f0      	bne.n	8001266 <HAL_RCC_OscConfig+0x5aa>
 8001284:	e024      	b.n	80012d0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e01f      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001292:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001298:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <HAL_RCC_OscConfig+0x620>)
 800129a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	2380      	movs	r3, #128	@ 0x80
 80012a2:	025b      	lsls	r3, r3, #9
 80012a4:	401a      	ands	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d10e      	bne.n	80012cc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	220f      	movs	r2, #15
 80012b2:	401a      	ands	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d107      	bne.n	80012cc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	23f0      	movs	r3, #240	@ 0xf0
 80012c0:	039b      	lsls	r3, r3, #14
 80012c2:	401a      	ands	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b008      	add	sp, #32
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	40021000 	.word	0x40021000
 80012e0:	00001388 	.word	0x00001388
 80012e4:	efffffff 	.word	0xefffffff
 80012e8:	feffffff 	.word	0xfeffffff
 80012ec:	ffc2ffff 	.word	0xffc2ffff

080012f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e0b3      	b.n	800146c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001304:	4b5b      	ldr	r3, [pc, #364]	@ (8001474 <HAL_RCC_ClockConfig+0x184>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2201      	movs	r2, #1
 800130a:	4013      	ands	r3, r2
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d911      	bls.n	8001336 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001312:	4b58      	ldr	r3, [pc, #352]	@ (8001474 <HAL_RCC_ClockConfig+0x184>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2201      	movs	r2, #1
 8001318:	4393      	bics	r3, r2
 800131a:	0019      	movs	r1, r3
 800131c:	4b55      	ldr	r3, [pc, #340]	@ (8001474 <HAL_RCC_ClockConfig+0x184>)
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001324:	4b53      	ldr	r3, [pc, #332]	@ (8001474 <HAL_RCC_ClockConfig+0x184>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2201      	movs	r2, #1
 800132a:	4013      	ands	r3, r2
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d001      	beq.n	8001336 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e09a      	b.n	800146c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2202      	movs	r2, #2
 800133c:	4013      	ands	r3, r2
 800133e:	d015      	beq.n	800136c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2204      	movs	r2, #4
 8001346:	4013      	ands	r3, r2
 8001348:	d006      	beq.n	8001358 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800134a:	4b4b      	ldr	r3, [pc, #300]	@ (8001478 <HAL_RCC_ClockConfig+0x188>)
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4b4a      	ldr	r3, [pc, #296]	@ (8001478 <HAL_RCC_ClockConfig+0x188>)
 8001350:	21e0      	movs	r1, #224	@ 0xe0
 8001352:	00c9      	lsls	r1, r1, #3
 8001354:	430a      	orrs	r2, r1
 8001356:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001358:	4b47      	ldr	r3, [pc, #284]	@ (8001478 <HAL_RCC_ClockConfig+0x188>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	22f0      	movs	r2, #240	@ 0xf0
 800135e:	4393      	bics	r3, r2
 8001360:	0019      	movs	r1, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	4b44      	ldr	r3, [pc, #272]	@ (8001478 <HAL_RCC_ClockConfig+0x188>)
 8001368:	430a      	orrs	r2, r1
 800136a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2201      	movs	r2, #1
 8001372:	4013      	ands	r3, r2
 8001374:	d040      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d107      	bne.n	800138e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	4b3e      	ldr	r3, [pc, #248]	@ (8001478 <HAL_RCC_ClockConfig+0x188>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	2380      	movs	r3, #128	@ 0x80
 8001384:	029b      	lsls	r3, r3, #10
 8001386:	4013      	ands	r3, r2
 8001388:	d114      	bne.n	80013b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e06e      	b.n	800146c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d107      	bne.n	80013a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001396:	4b38      	ldr	r3, [pc, #224]	@ (8001478 <HAL_RCC_ClockConfig+0x188>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	2380      	movs	r3, #128	@ 0x80
 800139c:	049b      	lsls	r3, r3, #18
 800139e:	4013      	ands	r3, r2
 80013a0:	d108      	bne.n	80013b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e062      	b.n	800146c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a6:	4b34      	ldr	r3, [pc, #208]	@ (8001478 <HAL_RCC_ClockConfig+0x188>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2202      	movs	r2, #2
 80013ac:	4013      	ands	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e05b      	b.n	800146c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013b4:	4b30      	ldr	r3, [pc, #192]	@ (8001478 <HAL_RCC_ClockConfig+0x188>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2203      	movs	r2, #3
 80013ba:	4393      	bics	r3, r2
 80013bc:	0019      	movs	r1, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001478 <HAL_RCC_ClockConfig+0x188>)
 80013c4:	430a      	orrs	r2, r1
 80013c6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013c8:	f7ff f9ec 	bl	80007a4 <HAL_GetTick>
 80013cc:	0003      	movs	r3, r0
 80013ce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d0:	e009      	b.n	80013e6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d2:	f7ff f9e7 	bl	80007a4 <HAL_GetTick>
 80013d6:	0002      	movs	r2, r0
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	4a27      	ldr	r2, [pc, #156]	@ (800147c <HAL_RCC_ClockConfig+0x18c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e042      	b.n	800146c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e6:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <HAL_RCC_ClockConfig+0x188>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	220c      	movs	r2, #12
 80013ec:	401a      	ands	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d1ec      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <HAL_RCC_ClockConfig+0x184>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	4013      	ands	r3, r2
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d211      	bcs.n	800142a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <HAL_RCC_ClockConfig+0x184>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2201      	movs	r2, #1
 800140c:	4393      	bics	r3, r2
 800140e:	0019      	movs	r1, r3
 8001410:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <HAL_RCC_ClockConfig+0x184>)
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001418:	4b16      	ldr	r3, [pc, #88]	@ (8001474 <HAL_RCC_ClockConfig+0x184>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2201      	movs	r2, #1
 800141e:	4013      	ands	r3, r2
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d001      	beq.n	800142a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e020      	b.n	800146c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2204      	movs	r2, #4
 8001430:	4013      	ands	r3, r2
 8001432:	d009      	beq.n	8001448 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001434:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <HAL_RCC_ClockConfig+0x188>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4a11      	ldr	r2, [pc, #68]	@ (8001480 <HAL_RCC_ClockConfig+0x190>)
 800143a:	4013      	ands	r3, r2
 800143c:	0019      	movs	r1, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <HAL_RCC_ClockConfig+0x188>)
 8001444:	430a      	orrs	r2, r1
 8001446:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001448:	f000 f82e 	bl	80014a8 <HAL_RCC_GetSysClockFreq>
 800144c:	0001      	movs	r1, r0
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_RCC_ClockConfig+0x188>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	220f      	movs	r2, #15
 8001456:	4013      	ands	r3, r2
 8001458:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <HAL_RCC_ClockConfig+0x194>)
 800145a:	5cd3      	ldrb	r3, [r2, r3]
 800145c:	000a      	movs	r2, r1
 800145e:	40da      	lsrs	r2, r3
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <HAL_RCC_ClockConfig+0x198>)
 8001462:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001464:	2003      	movs	r0, #3
 8001466:	f7ff f957 	bl	8000718 <HAL_InitTick>
  
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	0018      	movs	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	b004      	add	sp, #16
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40022000 	.word	0x40022000
 8001478:	40021000 	.word	0x40021000
 800147c:	00001388 	.word	0x00001388
 8001480:	fffff8ff 	.word	0xfffff8ff
 8001484:	08002b28 	.word	0x08002b28
 8001488:	2000001c 	.word	0x2000001c

0800148c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <HAL_RCC_EnableCSS+0x18>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <HAL_RCC_EnableCSS+0x18>)
 8001496:	2180      	movs	r1, #128	@ 0x80
 8001498:	0309      	lsls	r1, r1, #12
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]
}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000

080014a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80014c2:	4b20      	ldr	r3, [pc, #128]	@ (8001544 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	220c      	movs	r2, #12
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d002      	beq.n	80014d8 <HAL_RCC_GetSysClockFreq+0x30>
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d003      	beq.n	80014de <HAL_RCC_GetSysClockFreq+0x36>
 80014d6:	e02c      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014da:	613b      	str	r3, [r7, #16]
      break;
 80014dc:	e02c      	b.n	8001538 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	0c9b      	lsrs	r3, r3, #18
 80014e2:	220f      	movs	r2, #15
 80014e4:	4013      	ands	r3, r2
 80014e6:	4a19      	ldr	r2, [pc, #100]	@ (800154c <HAL_RCC_GetSysClockFreq+0xa4>)
 80014e8:	5cd3      	ldrb	r3, [r2, r3]
 80014ea:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80014ec:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f0:	220f      	movs	r2, #15
 80014f2:	4013      	ands	r3, r2
 80014f4:	4a16      	ldr	r2, [pc, #88]	@ (8001550 <HAL_RCC_GetSysClockFreq+0xa8>)
 80014f6:	5cd3      	ldrb	r3, [r2, r3]
 80014f8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	2380      	movs	r3, #128	@ 0x80
 80014fe:	025b      	lsls	r3, r3, #9
 8001500:	4013      	ands	r3, r2
 8001502:	d009      	beq.n	8001518 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	4810      	ldr	r0, [pc, #64]	@ (8001548 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001508:	f7fe fe08 	bl	800011c <__udivsi3>
 800150c:	0003      	movs	r3, r0
 800150e:	001a      	movs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4353      	muls	r3, r2
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	e009      	b.n	800152c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	000a      	movs	r2, r1
 800151c:	0152      	lsls	r2, r2, #5
 800151e:	1a52      	subs	r2, r2, r1
 8001520:	0193      	lsls	r3, r2, #6
 8001522:	1a9b      	subs	r3, r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	185b      	adds	r3, r3, r1
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	613b      	str	r3, [r7, #16]
      break;
 8001530:	e002      	b.n	8001538 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001532:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001534:	613b      	str	r3, [r7, #16]
      break;
 8001536:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001538:	693b      	ldr	r3, [r7, #16]
}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b006      	add	sp, #24
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	40021000 	.word	0x40021000
 8001548:	007a1200 	.word	0x007a1200
 800154c:	08002b40 	.word	0x08002b40
 8001550:	08002b50 	.word	0x08002b50

08001554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001558:	4b02      	ldr	r3, [pc, #8]	@ (8001564 <HAL_RCC_GetHCLKFreq+0x10>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	2000001c 	.word	0x2000001c

08001568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800156c:	f7ff fff2 	bl	8001554 <HAL_RCC_GetHCLKFreq>
 8001570:	0001      	movs	r1, r0
 8001572:	4b06      	ldr	r3, [pc, #24]	@ (800158c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	2207      	movs	r2, #7
 800157a:	4013      	ands	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800157e:	5cd3      	ldrb	r3, [r2, r3]
 8001580:	40d9      	lsrs	r1, r3
 8001582:	000b      	movs	r3, r1
}    
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	40021000 	.word	0x40021000
 8001590:	08002b38 	.word	0x08002b38

08001594 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_RCC_NMI_IRQHandler+0x20>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2280      	movs	r2, #128	@ 0x80
 800159e:	4013      	ands	r3, r2
 80015a0:	2b80      	cmp	r3, #128	@ 0x80
 80015a2:	d104      	bne.n	80015ae <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80015a4:	f000 f80a 	bl	80015bc <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80015aa:	2280      	movs	r2, #128	@ 0x80
 80015ac:	701a      	strb	r2, [r3, #0]
  }
}
 80015ae:	46c0      	nop			@ (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40021000 	.word	0x40021000
 80015b8:	4002100a 	.word	0x4002100a

080015bc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 80015c0:	46c0      	nop			@ (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	025b      	lsls	r3, r3, #9
 80015e0:	4013      	ands	r3, r2
 80015e2:	d100      	bne.n	80015e6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80015e4:	e08e      	b.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80015e6:	2017      	movs	r0, #23
 80015e8:	183b      	adds	r3, r7, r0
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ee:	4b57      	ldr	r3, [pc, #348]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015f0:	69da      	ldr	r2, [r3, #28]
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	055b      	lsls	r3, r3, #21
 80015f6:	4013      	ands	r3, r2
 80015f8:	d110      	bne.n	800161c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b54      	ldr	r3, [pc, #336]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	4b53      	ldr	r3, [pc, #332]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001600:	2180      	movs	r1, #128	@ 0x80
 8001602:	0549      	lsls	r1, r1, #21
 8001604:	430a      	orrs	r2, r1
 8001606:	61da      	str	r2, [r3, #28]
 8001608:	4b50      	ldr	r3, [pc, #320]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800160a:	69da      	ldr	r2, [r3, #28]
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	055b      	lsls	r3, r3, #21
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001616:	183b      	adds	r3, r7, r0
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	4b4c      	ldr	r3, [pc, #304]	@ (8001750 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2380      	movs	r3, #128	@ 0x80
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4013      	ands	r3, r2
 8001626:	d11a      	bne.n	800165e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001628:	4b49      	ldr	r3, [pc, #292]	@ (8001750 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b48      	ldr	r3, [pc, #288]	@ (8001750 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800162e:	2180      	movs	r1, #128	@ 0x80
 8001630:	0049      	lsls	r1, r1, #1
 8001632:	430a      	orrs	r2, r1
 8001634:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001636:	f7ff f8b5 	bl	80007a4 <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163e:	e008      	b.n	8001652 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001640:	f7ff f8b0 	bl	80007a4 <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	@ 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e077      	b.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001652:	4b3f      	ldr	r3, [pc, #252]	@ (8001750 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4013      	ands	r3, r2
 800165c:	d0f0      	beq.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800165e:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001660:	6a1a      	ldr	r2, [r3, #32]
 8001662:	23c0      	movs	r3, #192	@ 0xc0
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4013      	ands	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d034      	beq.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	23c0      	movs	r3, #192	@ 0xc0
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4013      	ands	r3, r2
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	429a      	cmp	r2, r3
 800167e:	d02c      	beq.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001680:	4b32      	ldr	r3, [pc, #200]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4a33      	ldr	r2, [pc, #204]	@ (8001754 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001686:	4013      	ands	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800168a:	4b30      	ldr	r3, [pc, #192]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800168c:	6a1a      	ldr	r2, [r3, #32]
 800168e:	4b2f      	ldr	r3, [pc, #188]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001690:	2180      	movs	r1, #128	@ 0x80
 8001692:	0249      	lsls	r1, r1, #9
 8001694:	430a      	orrs	r2, r1
 8001696:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001698:	4b2c      	ldr	r3, [pc, #176]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800169a:	6a1a      	ldr	r2, [r3, #32]
 800169c:	4b2b      	ldr	r3, [pc, #172]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800169e:	492e      	ldr	r1, [pc, #184]	@ (8001758 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80016a0:	400a      	ands	r2, r1
 80016a2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80016a4:	4b29      	ldr	r3, [pc, #164]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2201      	movs	r2, #1
 80016ae:	4013      	ands	r3, r2
 80016b0:	d013      	beq.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff f877 	bl	80007a4 <HAL_GetTick>
 80016b6:	0003      	movs	r3, r0
 80016b8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ba:	e009      	b.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016bc:	f7ff f872 	bl	80007a4 <HAL_GetTick>
 80016c0:	0002      	movs	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	4a25      	ldr	r2, [pc, #148]	@ (800175c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e038      	b.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	2202      	movs	r2, #2
 80016d6:	4013      	ands	r3, r2
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016da:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4a1d      	ldr	r2, [pc, #116]	@ (8001754 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	4b18      	ldr	r3, [pc, #96]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016ea:	430a      	orrs	r2, r1
 80016ec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016ee:	2317      	movs	r3, #23
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016fa:	69da      	ldr	r2, [r3, #28]
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016fe:	4918      	ldr	r1, [pc, #96]	@ (8001760 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001700:	400a      	ands	r2, r1
 8001702:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	4013      	ands	r3, r2
 800170c:	d009      	beq.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	2203      	movs	r2, #3
 8001714:	4393      	bics	r3, r2
 8001716:	0019      	movs	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800171e:	430a      	orrs	r2, r1
 8001720:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2220      	movs	r2, #32
 8001728:	4013      	ands	r3, r2
 800172a:	d009      	beq.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800172c:	4b07      	ldr	r3, [pc, #28]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001730:	2210      	movs	r2, #16
 8001732:	4393      	bics	r3, r2
 8001734:	0019      	movs	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	4b04      	ldr	r3, [pc, #16]	@ (800174c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800173c:	430a      	orrs	r2, r1
 800173e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	0018      	movs	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	b006      	add	sp, #24
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	40021000 	.word	0x40021000
 8001750:	40007000 	.word	0x40007000
 8001754:	fffffcff 	.word	0xfffffcff
 8001758:	fffeffff 	.word	0xfffeffff
 800175c:	00001388 	.word	0x00001388
 8001760:	efffffff 	.word	0xefffffff

08001764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e044      	b.n	8001800 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800177a:	2b00      	cmp	r3, #0
 800177c:	d107      	bne.n	800178e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2278      	movs	r2, #120	@ 0x78
 8001782:	2100      	movs	r1, #0
 8001784:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	0018      	movs	r0, r3
 800178a:	f7fe fee3 	bl	8000554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2224      	movs	r2, #36	@ 0x24
 8001792:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2101      	movs	r1, #1
 80017a0:	438a      	bics	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	0018      	movs	r0, r3
 80017b0:	f000 fac8 	bl	8001d44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	0018      	movs	r0, r3
 80017b8:	f000 f99c 	bl	8001af4 <UART_SetConfig>
 80017bc:	0003      	movs	r3, r0
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e01c      	b.n	8001800 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	490d      	ldr	r1, [pc, #52]	@ (8001808 <HAL_UART_Init+0xa4>)
 80017d2:	400a      	ands	r2, r1
 80017d4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2108      	movs	r1, #8
 80017e2:	438a      	bics	r2, r1
 80017e4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2101      	movs	r1, #1
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f000 fb57 	bl	8001eac <UART_CheckIdleState>
 80017fe:	0003      	movs	r3, r0
}
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	b002      	add	sp, #8
 8001806:	bd80      	pop	{r7, pc}
 8001808:	fffff7ff 	.word	0xfffff7ff

0800180c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	@ 0x28
 8001810:	af02      	add	r7, sp, #8
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	1dbb      	adds	r3, r7, #6
 800181a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001820:	2b20      	cmp	r3, #32
 8001822:	d000      	beq.n	8001826 <HAL_UART_Transmit+0x1a>
 8001824:	e08c      	b.n	8001940 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_UART_Transmit+0x28>
 800182c:	1dbb      	adds	r3, r7, #6
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e084      	b.n	8001942 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	2380      	movs	r3, #128	@ 0x80
 800183e:	015b      	lsls	r3, r3, #5
 8001840:	429a      	cmp	r2, r3
 8001842:	d109      	bne.n	8001858 <HAL_UART_Transmit+0x4c>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d105      	bne.n	8001858 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2201      	movs	r2, #1
 8001850:	4013      	ands	r3, r2
 8001852:	d001      	beq.n	8001858 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e074      	b.n	8001942 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2284      	movs	r2, #132	@ 0x84
 800185c:	2100      	movs	r1, #0
 800185e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2221      	movs	r2, #33	@ 0x21
 8001864:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001866:	f7fe ff9d 	bl	80007a4 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1dba      	adds	r2, r7, #6
 8001872:	2150      	movs	r1, #80	@ 0x50
 8001874:	8812      	ldrh	r2, [r2, #0]
 8001876:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1dba      	adds	r2, r7, #6
 800187c:	2152      	movs	r1, #82	@ 0x52
 800187e:	8812      	ldrh	r2, [r2, #0]
 8001880:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	2380      	movs	r3, #128	@ 0x80
 8001888:	015b      	lsls	r3, r3, #5
 800188a:	429a      	cmp	r2, r3
 800188c:	d108      	bne.n	80018a0 <HAL_UART_Transmit+0x94>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d104      	bne.n	80018a0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	e003      	b.n	80018a8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80018a8:	e02f      	b.n	800190a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	0013      	movs	r3, r2
 80018b4:	2200      	movs	r2, #0
 80018b6:	2180      	movs	r1, #128	@ 0x80
 80018b8:	f000 fba0 	bl	8001ffc <UART_WaitOnFlagUntilTimeout>
 80018bc:	1e03      	subs	r3, r0, #0
 80018be:	d004      	beq.n	80018ca <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2220      	movs	r2, #32
 80018c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e03b      	b.n	8001942 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10b      	bne.n	80018e8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	881a      	ldrh	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	05d2      	lsls	r2, r2, #23
 80018da:	0dd2      	lsrs	r2, r2, #23
 80018dc:	b292      	uxth	r2, r2
 80018de:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	3302      	adds	r3, #2
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	e007      	b.n	80018f8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3301      	adds	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2252      	movs	r2, #82	@ 0x52
 80018fc:	5a9b      	ldrh	r3, [r3, r2]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	3b01      	subs	r3, #1
 8001902:	b299      	uxth	r1, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2252      	movs	r2, #82	@ 0x52
 8001908:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2252      	movs	r2, #82	@ 0x52
 800190e:	5a9b      	ldrh	r3, [r3, r2]
 8001910:	b29b      	uxth	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1c9      	bne.n	80018aa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	0013      	movs	r3, r2
 8001920:	2200      	movs	r2, #0
 8001922:	2140      	movs	r1, #64	@ 0x40
 8001924:	f000 fb6a 	bl	8001ffc <UART_WaitOnFlagUntilTimeout>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d004      	beq.n	8001936 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2220      	movs	r2, #32
 8001930:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e005      	b.n	8001942 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2220      	movs	r2, #32
 800193a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	e000      	b.n	8001942 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001940:	2302      	movs	r3, #2
  }
}
 8001942:	0018      	movs	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	b008      	add	sp, #32
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	@ 0x28
 8001950:	af02      	add	r7, sp, #8
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	1dbb      	adds	r3, r7, #6
 800195a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2280      	movs	r2, #128	@ 0x80
 8001960:	589b      	ldr	r3, [r3, r2]
 8001962:	2b20      	cmp	r3, #32
 8001964:	d000      	beq.n	8001968 <HAL_UART_Receive+0x1c>
 8001966:	e0bd      	b.n	8001ae4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_UART_Receive+0x2a>
 800196e:	1dbb      	adds	r3, r7, #6
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0b5      	b.n	8001ae6 <HAL_UART_Receive+0x19a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	2380      	movs	r3, #128	@ 0x80
 8001980:	015b      	lsls	r3, r3, #5
 8001982:	429a      	cmp	r2, r3
 8001984:	d109      	bne.n	800199a <HAL_UART_Receive+0x4e>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d105      	bne.n	800199a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2201      	movs	r2, #1
 8001992:	4013      	ands	r3, r2
 8001994:	d001      	beq.n	800199a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e0a5      	b.n	8001ae6 <HAL_UART_Receive+0x19a>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2284      	movs	r2, #132	@ 0x84
 800199e:	2100      	movs	r1, #0
 80019a0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2280      	movs	r2, #128	@ 0x80
 80019a6:	2122      	movs	r1, #34	@ 0x22
 80019a8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019b0:	f7fe fef8 	bl	80007a4 <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1dba      	adds	r2, r7, #6
 80019bc:	2158      	movs	r1, #88	@ 0x58
 80019be:	8812      	ldrh	r2, [r2, #0]
 80019c0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1dba      	adds	r2, r7, #6
 80019c6:	215a      	movs	r1, #90	@ 0x5a
 80019c8:	8812      	ldrh	r2, [r2, #0]
 80019ca:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	2380      	movs	r3, #128	@ 0x80
 80019d2:	015b      	lsls	r3, r3, #5
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d10d      	bne.n	80019f4 <HAL_UART_Receive+0xa8>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d104      	bne.n	80019ea <HAL_UART_Receive+0x9e>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	225c      	movs	r2, #92	@ 0x5c
 80019e4:	4942      	ldr	r1, [pc, #264]	@ (8001af0 <HAL_UART_Receive+0x1a4>)
 80019e6:	5299      	strh	r1, [r3, r2]
 80019e8:	e01a      	b.n	8001a20 <HAL_UART_Receive+0xd4>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	225c      	movs	r2, #92	@ 0x5c
 80019ee:	21ff      	movs	r1, #255	@ 0xff
 80019f0:	5299      	strh	r1, [r3, r2]
 80019f2:	e015      	b.n	8001a20 <HAL_UART_Receive+0xd4>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10d      	bne.n	8001a18 <HAL_UART_Receive+0xcc>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d104      	bne.n	8001a0e <HAL_UART_Receive+0xc2>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	225c      	movs	r2, #92	@ 0x5c
 8001a08:	21ff      	movs	r1, #255	@ 0xff
 8001a0a:	5299      	strh	r1, [r3, r2]
 8001a0c:	e008      	b.n	8001a20 <HAL_UART_Receive+0xd4>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	225c      	movs	r2, #92	@ 0x5c
 8001a12:	217f      	movs	r1, #127	@ 0x7f
 8001a14:	5299      	strh	r1, [r3, r2]
 8001a16:	e003      	b.n	8001a20 <HAL_UART_Receive+0xd4>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	225c      	movs	r2, #92	@ 0x5c
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001a20:	2312      	movs	r3, #18
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	215c      	movs	r1, #92	@ 0x5c
 8001a28:	5a52      	ldrh	r2, [r2, r1]
 8001a2a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	015b      	lsls	r3, r3, #5
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d108      	bne.n	8001a4a <HAL_UART_Receive+0xfe>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d104      	bne.n	8001a4a <HAL_UART_Receive+0xfe>
    {
      pdata8bits  = NULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	e003      	b.n	8001a52 <HAL_UART_Receive+0x106>
    }
    else
    {
      pdata8bits  = pData;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001a52:	e03b      	b.n	8001acc <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	0013      	movs	r3, r2
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2120      	movs	r1, #32
 8001a62:	f000 facb 	bl	8001ffc <UART_WaitOnFlagUntilTimeout>
 8001a66:	1e03      	subs	r3, r0, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_UART_Receive+0x12a>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2280      	movs	r2, #128	@ 0x80
 8001a6e:	2120      	movs	r1, #32
 8001a70:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e037      	b.n	8001ae6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10e      	bne.n	8001a9a <HAL_UART_Receive+0x14e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	2212      	movs	r2, #18
 8001a86:	18ba      	adds	r2, r7, r2
 8001a88:	8812      	ldrh	r2, [r2, #0]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	3302      	adds	r3, #2
 8001a96:	61bb      	str	r3, [r7, #24]
 8001a98:	e00f      	b.n	8001aba <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2212      	movs	r2, #18
 8001aa6:	18ba      	adds	r2, r7, r2
 8001aa8:	8812      	ldrh	r2, [r2, #0]
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	4013      	ands	r3, r2
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	225a      	movs	r2, #90	@ 0x5a
 8001abe:	5a9b      	ldrh	r3, [r3, r2]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b299      	uxth	r1, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	225a      	movs	r2, #90	@ 0x5a
 8001aca:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	225a      	movs	r2, #90	@ 0x5a
 8001ad0:	5a9b      	ldrh	r3, [r3, r2]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1bd      	bne.n	8001a54 <HAL_UART_Receive+0x108>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2280      	movs	r2, #128	@ 0x80
 8001adc:	2120      	movs	r1, #32
 8001ade:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e000      	b.n	8001ae6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8001ae4:	2302      	movs	r3, #2
  }
}
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b008      	add	sp, #32
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	000001ff 	.word	0x000001ff

08001af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001afc:	231e      	movs	r3, #30
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a83      	ldr	r2, [pc, #524]	@ (8001d30 <UART_SetConfig+0x23c>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	0019      	movs	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a7e      	ldr	r2, [pc, #504]	@ (8001d34 <UART_SetConfig+0x240>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4a75      	ldr	r2, [pc, #468]	@ (8001d38 <UART_SetConfig+0x244>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	0019      	movs	r1, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b70:	4b72      	ldr	r3, [pc, #456]	@ (8001d3c <UART_SetConfig+0x248>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b74:	2203      	movs	r2, #3
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d00d      	beq.n	8001b98 <UART_SetConfig+0xa4>
 8001b7c:	d81b      	bhi.n	8001bb6 <UART_SetConfig+0xc2>
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d014      	beq.n	8001bac <UART_SetConfig+0xb8>
 8001b82:	d818      	bhi.n	8001bb6 <UART_SetConfig+0xc2>
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <UART_SetConfig+0x9a>
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d00a      	beq.n	8001ba2 <UART_SetConfig+0xae>
 8001b8c:	e013      	b.n	8001bb6 <UART_SetConfig+0xc2>
 8001b8e:	231f      	movs	r3, #31
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	e012      	b.n	8001bbe <UART_SetConfig+0xca>
 8001b98:	231f      	movs	r3, #31
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	e00d      	b.n	8001bbe <UART_SetConfig+0xca>
 8001ba2:	231f      	movs	r3, #31
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	e008      	b.n	8001bbe <UART_SetConfig+0xca>
 8001bac:	231f      	movs	r3, #31
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	701a      	strb	r2, [r3, #0]
 8001bb4:	e003      	b.n	8001bbe <UART_SetConfig+0xca>
 8001bb6:	231f      	movs	r3, #31
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	2210      	movs	r2, #16
 8001bbc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69da      	ldr	r2, [r3, #28]
 8001bc2:	2380      	movs	r3, #128	@ 0x80
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d15c      	bne.n	8001c84 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8001bca:	231f      	movs	r3, #31
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d015      	beq.n	8001c00 <UART_SetConfig+0x10c>
 8001bd4:	dc18      	bgt.n	8001c08 <UART_SetConfig+0x114>
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d00d      	beq.n	8001bf6 <UART_SetConfig+0x102>
 8001bda:	dc15      	bgt.n	8001c08 <UART_SetConfig+0x114>
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <UART_SetConfig+0xf2>
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d005      	beq.n	8001bf0 <UART_SetConfig+0xfc>
 8001be4:	e010      	b.n	8001c08 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001be6:	f7ff fcbf 	bl	8001568 <HAL_RCC_GetPCLK1Freq>
 8001bea:	0003      	movs	r3, r0
 8001bec:	61bb      	str	r3, [r7, #24]
        break;
 8001bee:	e012      	b.n	8001c16 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001bf0:	4b53      	ldr	r3, [pc, #332]	@ (8001d40 <UART_SetConfig+0x24c>)
 8001bf2:	61bb      	str	r3, [r7, #24]
        break;
 8001bf4:	e00f      	b.n	8001c16 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001bf6:	f7ff fc57 	bl	80014a8 <HAL_RCC_GetSysClockFreq>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	61bb      	str	r3, [r7, #24]
        break;
 8001bfe:	e00a      	b.n	8001c16 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	61bb      	str	r3, [r7, #24]
        break;
 8001c06:	e006      	b.n	8001c16 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001c0c:	231e      	movs	r3, #30
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
        break;
 8001c14:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d100      	bne.n	8001c1e <UART_SetConfig+0x12a>
 8001c1c:	e07a      	b.n	8001d14 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	005a      	lsls	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	085b      	lsrs	r3, r3, #1
 8001c28:	18d2      	adds	r2, r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	0019      	movs	r1, r3
 8001c30:	0010      	movs	r0, r2
 8001c32:	f7fe fa73 	bl	800011c <__udivsi3>
 8001c36:	0003      	movs	r3, r0
 8001c38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d91c      	bls.n	8001c7a <UART_SetConfig+0x186>
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	2380      	movs	r3, #128	@ 0x80
 8001c44:	025b      	lsls	r3, r3, #9
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d217      	bcs.n	8001c7a <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	200e      	movs	r0, #14
 8001c50:	183b      	adds	r3, r7, r0
 8001c52:	210f      	movs	r1, #15
 8001c54:	438a      	bics	r2, r1
 8001c56:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	085b      	lsrs	r3, r3, #1
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2207      	movs	r2, #7
 8001c60:	4013      	ands	r3, r2
 8001c62:	b299      	uxth	r1, r3
 8001c64:	183b      	adds	r3, r7, r0
 8001c66:	183a      	adds	r2, r7, r0
 8001c68:	8812      	ldrh	r2, [r2, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	183a      	adds	r2, r7, r0
 8001c74:	8812      	ldrh	r2, [r2, #0]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	e04c      	b.n	8001d14 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8001c7a:	231e      	movs	r3, #30
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	e047      	b.n	8001d14 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001c84:	231f      	movs	r3, #31
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d015      	beq.n	8001cba <UART_SetConfig+0x1c6>
 8001c8e:	dc18      	bgt.n	8001cc2 <UART_SetConfig+0x1ce>
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d00d      	beq.n	8001cb0 <UART_SetConfig+0x1bc>
 8001c94:	dc15      	bgt.n	8001cc2 <UART_SetConfig+0x1ce>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <UART_SetConfig+0x1ac>
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d005      	beq.n	8001caa <UART_SetConfig+0x1b6>
 8001c9e:	e010      	b.n	8001cc2 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ca0:	f7ff fc62 	bl	8001568 <HAL_RCC_GetPCLK1Freq>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	61bb      	str	r3, [r7, #24]
        break;
 8001ca8:	e012      	b.n	8001cd0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001caa:	4b25      	ldr	r3, [pc, #148]	@ (8001d40 <UART_SetConfig+0x24c>)
 8001cac:	61bb      	str	r3, [r7, #24]
        break;
 8001cae:	e00f      	b.n	8001cd0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001cb0:	f7ff fbfa 	bl	80014a8 <HAL_RCC_GetSysClockFreq>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	61bb      	str	r3, [r7, #24]
        break;
 8001cb8:	e00a      	b.n	8001cd0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001cba:	2380      	movs	r3, #128	@ 0x80
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	61bb      	str	r3, [r7, #24]
        break;
 8001cc0:	e006      	b.n	8001cd0 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001cc6:	231e      	movs	r3, #30
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
        break;
 8001cce:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01e      	beq.n	8001d14 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	085a      	lsrs	r2, r3, #1
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	18d2      	adds	r2, r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	0010      	movs	r0, r2
 8001ce8:	f7fe fa18 	bl	800011c <__udivsi3>
 8001cec:	0003      	movs	r3, r0
 8001cee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b0f      	cmp	r3, #15
 8001cf4:	d90a      	bls.n	8001d0c <UART_SetConfig+0x218>
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	2380      	movs	r3, #128	@ 0x80
 8001cfa:	025b      	lsls	r3, r3, #9
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d205      	bcs.n	8001d0c <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	e003      	b.n	8001d14 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8001d0c:	231e      	movs	r3, #30
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8001d20:	231e      	movs	r3, #30
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	781b      	ldrb	r3, [r3, #0]
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b008      	add	sp, #32
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	ffff69f3 	.word	0xffff69f3
 8001d34:	ffffcfff 	.word	0xffffcfff
 8001d38:	fffff4ff 	.word	0xfffff4ff
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	007a1200 	.word	0x007a1200

08001d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d50:	2208      	movs	r2, #8
 8001d52:	4013      	ands	r3, r2
 8001d54:	d00b      	beq.n	8001d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e88 <UART_AdvFeatureConfig+0x144>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	0019      	movs	r1, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d72:	2201      	movs	r2, #1
 8001d74:	4013      	ands	r3, r2
 8001d76:	d00b      	beq.n	8001d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4a43      	ldr	r2, [pc, #268]	@ (8001e8c <UART_AdvFeatureConfig+0x148>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	0019      	movs	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d94:	2202      	movs	r2, #2
 8001d96:	4013      	ands	r3, r2
 8001d98:	d00b      	beq.n	8001db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a3b      	ldr	r2, [pc, #236]	@ (8001e90 <UART_AdvFeatureConfig+0x14c>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	2204      	movs	r2, #4
 8001db8:	4013      	ands	r3, r2
 8001dba:	d00b      	beq.n	8001dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4a34      	ldr	r2, [pc, #208]	@ (8001e94 <UART_AdvFeatureConfig+0x150>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd8:	2210      	movs	r2, #16
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d00b      	beq.n	8001df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a2c      	ldr	r2, [pc, #176]	@ (8001e98 <UART_AdvFeatureConfig+0x154>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d00b      	beq.n	8001e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	4a25      	ldr	r2, [pc, #148]	@ (8001e9c <UART_AdvFeatureConfig+0x158>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	2240      	movs	r2, #64	@ 0x40
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d01d      	beq.n	8001e5e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea0 <UART_AdvFeatureConfig+0x15c>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e3e:	2380      	movs	r3, #128	@ 0x80
 8001e40:	035b      	lsls	r3, r3, #13
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d10b      	bne.n	8001e5e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a15      	ldr	r2, [pc, #84]	@ (8001ea4 <UART_AdvFeatureConfig+0x160>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	2280      	movs	r2, #128	@ 0x80
 8001e64:	4013      	ands	r3, r2
 8001e66:	d00b      	beq.n	8001e80 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea8 <UART_AdvFeatureConfig+0x164>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]
  }
}
 8001e80:	46c0      	nop			@ (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b002      	add	sp, #8
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	ffff7fff 	.word	0xffff7fff
 8001e8c:	fffdffff 	.word	0xfffdffff
 8001e90:	fffeffff 	.word	0xfffeffff
 8001e94:	fffbffff 	.word	0xfffbffff
 8001e98:	ffffefff 	.word	0xffffefff
 8001e9c:	ffffdfff 	.word	0xffffdfff
 8001ea0:	ffefffff 	.word	0xffefffff
 8001ea4:	ff9fffff 	.word	0xff9fffff
 8001ea8:	fff7ffff 	.word	0xfff7ffff

08001eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b092      	sub	sp, #72	@ 0x48
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2284      	movs	r2, #132	@ 0x84
 8001eb8:	2100      	movs	r1, #0
 8001eba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001ebc:	f7fe fc72 	bl	80007a4 <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2208      	movs	r2, #8
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d12c      	bne.n	8001f2c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ed4:	2280      	movs	r2, #128	@ 0x80
 8001ed6:	0391      	lsls	r1, r2, #14
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4a46      	ldr	r2, [pc, #280]	@ (8001ff4 <UART_CheckIdleState+0x148>)
 8001edc:	9200      	str	r2, [sp, #0]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f000 f88c 	bl	8001ffc <UART_WaitOnFlagUntilTimeout>
 8001ee4:	1e03      	subs	r3, r0, #0
 8001ee6:	d021      	beq.n	8001f2c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef8:	f383 8810 	msr	PRIMASK, r3
}
 8001efc:	46c0      	nop			@ (mov r8, r8)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2180      	movs	r1, #128	@ 0x80
 8001f0a:	438a      	bics	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f14:	f383 8810 	msr	PRIMASK, r3
}
 8001f18:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2278      	movs	r2, #120	@ 0x78
 8001f24:	2100      	movs	r1, #0
 8001f26:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e05f      	b.n	8001fec <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2204      	movs	r2, #4
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d146      	bne.n	8001fc8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f3c:	2280      	movs	r2, #128	@ 0x80
 8001f3e:	03d1      	lsls	r1, r2, #15
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff4 <UART_CheckIdleState+0x148>)
 8001f44:	9200      	str	r2, [sp, #0]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f000 f858 	bl	8001ffc <UART_WaitOnFlagUntilTimeout>
 8001f4c:	1e03      	subs	r3, r0, #0
 8001f4e:	d03b      	beq.n	8001fc8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f50:	f3ef 8310 	mrs	r3, PRIMASK
 8001f54:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f56:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	f383 8810 	msr	PRIMASK, r3
}
 8001f64:	46c0      	nop			@ (mov r8, r8)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4921      	ldr	r1, [pc, #132]	@ (8001ff8 <UART_CheckIdleState+0x14c>)
 8001f72:	400a      	ands	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f383 8810 	msr	PRIMASK, r3
}
 8001f80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f82:	f3ef 8310 	mrs	r3, PRIMASK
 8001f86:	61bb      	str	r3, [r7, #24]
  return(result);
 8001f88:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f383 8810 	msr	PRIMASK, r3
}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	438a      	bics	r2, r1
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001faa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	f383 8810 	msr	PRIMASK, r3
}
 8001fb2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2280      	movs	r2, #128	@ 0x80
 8001fb8:	2120      	movs	r1, #32
 8001fba:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2278      	movs	r2, #120	@ 0x78
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e011      	b.n	8001fec <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2280      	movs	r2, #128	@ 0x80
 8001fd2:	2120      	movs	r1, #32
 8001fd4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2278      	movs	r2, #120	@ 0x78
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	0018      	movs	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b010      	add	sp, #64	@ 0x40
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	01ffffff 	.word	0x01ffffff
 8001ff8:	fffffedf 	.word	0xfffffedf

08001ffc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	1dfb      	adds	r3, r7, #7
 800200a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800200c:	e051      	b.n	80020b2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	3301      	adds	r3, #1
 8002012:	d04e      	beq.n	80020b2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002014:	f7fe fbc6 	bl	80007a4 <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	429a      	cmp	r2, r3
 8002022:	d302      	bcc.n	800202a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e051      	b.n	80020d2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2204      	movs	r2, #4
 8002036:	4013      	ands	r3, r2
 8002038:	d03b      	beq.n	80020b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b80      	cmp	r3, #128	@ 0x80
 800203e:	d038      	beq.n	80020b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b40      	cmp	r3, #64	@ 0x40
 8002044:	d035      	beq.n	80020b2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	2208      	movs	r2, #8
 800204e:	4013      	ands	r3, r2
 8002050:	2b08      	cmp	r3, #8
 8002052:	d111      	bne.n	8002078 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2208      	movs	r2, #8
 800205a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	0018      	movs	r0, r3
 8002060:	f000 f83c 	bl	80020dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2284      	movs	r2, #132	@ 0x84
 8002068:	2108      	movs	r1, #8
 800206a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2278      	movs	r2, #120	@ 0x78
 8002070:	2100      	movs	r1, #0
 8002072:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e02c      	b.n	80020d2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	2380      	movs	r3, #128	@ 0x80
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	401a      	ands	r2, r3
 8002084:	2380      	movs	r3, #128	@ 0x80
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	429a      	cmp	r2, r3
 800208a:	d112      	bne.n	80020b2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2280      	movs	r2, #128	@ 0x80
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	0018      	movs	r0, r3
 800209a:	f000 f81f 	bl	80020dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2284      	movs	r2, #132	@ 0x84
 80020a2:	2120      	movs	r1, #32
 80020a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2278      	movs	r2, #120	@ 0x78
 80020aa:	2100      	movs	r1, #0
 80020ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e00f      	b.n	80020d2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	4013      	ands	r3, r2
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	425a      	negs	r2, r3
 80020c2:	4153      	adcs	r3, r2
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	001a      	movs	r2, r3
 80020c8:	1dfb      	adds	r3, r7, #7
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d09e      	beq.n	800200e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	0018      	movs	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b004      	add	sp, #16
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08e      	sub	sp, #56	@ 0x38
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020e4:	f3ef 8310 	mrs	r3, PRIMASK
 80020e8:	617b      	str	r3, [r7, #20]
  return(result);
 80020ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80020ee:	2301      	movs	r3, #1
 80020f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	f383 8810 	msr	PRIMASK, r3
}
 80020f8:	46c0      	nop			@ (mov r8, r8)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4926      	ldr	r1, [pc, #152]	@ (80021a0 <UART_EndRxTransfer+0xc4>)
 8002106:	400a      	ands	r2, r1
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800210c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f383 8810 	msr	PRIMASK, r3
}
 8002114:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002116:	f3ef 8310 	mrs	r3, PRIMASK
 800211a:	623b      	str	r3, [r7, #32]
  return(result);
 800211c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800211e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002120:	2301      	movs	r3, #1
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	f383 8810 	msr	PRIMASK, r3
}
 800212a:	46c0      	nop			@ (mov r8, r8)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2101      	movs	r1, #1
 8002138:	438a      	bics	r2, r1
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002142:	f383 8810 	msr	PRIMASK, r3
}
 8002146:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214c:	2b01      	cmp	r3, #1
 800214e:	d118      	bne.n	8002182 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002150:	f3ef 8310 	mrs	r3, PRIMASK
 8002154:	60bb      	str	r3, [r7, #8]
  return(result);
 8002156:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800215a:	2301      	movs	r3, #1
 800215c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f383 8810 	msr	PRIMASK, r3
}
 8002164:	46c0      	nop			@ (mov r8, r8)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2110      	movs	r1, #16
 8002172:	438a      	bics	r2, r1
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002178:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f383 8810 	msr	PRIMASK, r3
}
 8002180:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2280      	movs	r2, #128	@ 0x80
 8002186:	2120      	movs	r1, #32
 8002188:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002196:	46c0      	nop			@ (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	b00e      	add	sp, #56	@ 0x38
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	fffffedf 	.word	0xfffffedf

080021a4 <siprintf>:
 80021a4:	b40e      	push	{r1, r2, r3}
 80021a6:	b510      	push	{r4, lr}
 80021a8:	2400      	movs	r4, #0
 80021aa:	490c      	ldr	r1, [pc, #48]	@ (80021dc <siprintf+0x38>)
 80021ac:	b09d      	sub	sp, #116	@ 0x74
 80021ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 80021b0:	9002      	str	r0, [sp, #8]
 80021b2:	9006      	str	r0, [sp, #24]
 80021b4:	9107      	str	r1, [sp, #28]
 80021b6:	9104      	str	r1, [sp, #16]
 80021b8:	4809      	ldr	r0, [pc, #36]	@ (80021e0 <siprintf+0x3c>)
 80021ba:	490a      	ldr	r1, [pc, #40]	@ (80021e4 <siprintf+0x40>)
 80021bc:	cb04      	ldmia	r3!, {r2}
 80021be:	9105      	str	r1, [sp, #20]
 80021c0:	6800      	ldr	r0, [r0, #0]
 80021c2:	a902      	add	r1, sp, #8
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80021c8:	f000 f99e 	bl	8002508 <_svfiprintf_r>
 80021cc:	9b02      	ldr	r3, [sp, #8]
 80021ce:	701c      	strb	r4, [r3, #0]
 80021d0:	b01d      	add	sp, #116	@ 0x74
 80021d2:	bc10      	pop	{r4}
 80021d4:	bc08      	pop	{r3}
 80021d6:	b003      	add	sp, #12
 80021d8:	4718      	bx	r3
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	7fffffff 	.word	0x7fffffff
 80021e0:	20000028 	.word	0x20000028
 80021e4:	ffff0208 	.word	0xffff0208

080021e8 <memset>:
 80021e8:	0003      	movs	r3, r0
 80021ea:	1882      	adds	r2, r0, r2
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d100      	bne.n	80021f2 <memset+0xa>
 80021f0:	4770      	bx	lr
 80021f2:	7019      	strb	r1, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	e7f9      	b.n	80021ec <memset+0x4>

080021f8 <__errno>:
 80021f8:	4b01      	ldr	r3, [pc, #4]	@ (8002200 <__errno+0x8>)
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	4770      	bx	lr
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	20000028 	.word	0x20000028

08002204 <__libc_init_array>:
 8002204:	b570      	push	{r4, r5, r6, lr}
 8002206:	2600      	movs	r6, #0
 8002208:	4c0c      	ldr	r4, [pc, #48]	@ (800223c <__libc_init_array+0x38>)
 800220a:	4d0d      	ldr	r5, [pc, #52]	@ (8002240 <__libc_init_array+0x3c>)
 800220c:	1b64      	subs	r4, r4, r5
 800220e:	10a4      	asrs	r4, r4, #2
 8002210:	42a6      	cmp	r6, r4
 8002212:	d109      	bne.n	8002228 <__libc_init_array+0x24>
 8002214:	2600      	movs	r6, #0
 8002216:	f000 fc61 	bl	8002adc <_init>
 800221a:	4c0a      	ldr	r4, [pc, #40]	@ (8002244 <__libc_init_array+0x40>)
 800221c:	4d0a      	ldr	r5, [pc, #40]	@ (8002248 <__libc_init_array+0x44>)
 800221e:	1b64      	subs	r4, r4, r5
 8002220:	10a4      	asrs	r4, r4, #2
 8002222:	42a6      	cmp	r6, r4
 8002224:	d105      	bne.n	8002232 <__libc_init_array+0x2e>
 8002226:	bd70      	pop	{r4, r5, r6, pc}
 8002228:	00b3      	lsls	r3, r6, #2
 800222a:	58eb      	ldr	r3, [r5, r3]
 800222c:	4798      	blx	r3
 800222e:	3601      	adds	r6, #1
 8002230:	e7ee      	b.n	8002210 <__libc_init_array+0xc>
 8002232:	00b3      	lsls	r3, r6, #2
 8002234:	58eb      	ldr	r3, [r5, r3]
 8002236:	4798      	blx	r3
 8002238:	3601      	adds	r6, #1
 800223a:	e7f2      	b.n	8002222 <__libc_init_array+0x1e>
 800223c:	08002b94 	.word	0x08002b94
 8002240:	08002b94 	.word	0x08002b94
 8002244:	08002b98 	.word	0x08002b98
 8002248:	08002b94 	.word	0x08002b94

0800224c <__retarget_lock_acquire_recursive>:
 800224c:	4770      	bx	lr

0800224e <__retarget_lock_release_recursive>:
 800224e:	4770      	bx	lr

08002250 <_free_r>:
 8002250:	b570      	push	{r4, r5, r6, lr}
 8002252:	0005      	movs	r5, r0
 8002254:	1e0c      	subs	r4, r1, #0
 8002256:	d010      	beq.n	800227a <_free_r+0x2a>
 8002258:	3c04      	subs	r4, #4
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	da00      	bge.n	8002262 <_free_r+0x12>
 8002260:	18e4      	adds	r4, r4, r3
 8002262:	0028      	movs	r0, r5
 8002264:	f000 f8e0 	bl	8002428 <__malloc_lock>
 8002268:	4a1d      	ldr	r2, [pc, #116]	@ (80022e0 <_free_r+0x90>)
 800226a:	6813      	ldr	r3, [r2, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <_free_r+0x2c>
 8002270:	6063      	str	r3, [r4, #4]
 8002272:	6014      	str	r4, [r2, #0]
 8002274:	0028      	movs	r0, r5
 8002276:	f000 f8df 	bl	8002438 <__malloc_unlock>
 800227a:	bd70      	pop	{r4, r5, r6, pc}
 800227c:	42a3      	cmp	r3, r4
 800227e:	d908      	bls.n	8002292 <_free_r+0x42>
 8002280:	6820      	ldr	r0, [r4, #0]
 8002282:	1821      	adds	r1, r4, r0
 8002284:	428b      	cmp	r3, r1
 8002286:	d1f3      	bne.n	8002270 <_free_r+0x20>
 8002288:	6819      	ldr	r1, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	1809      	adds	r1, r1, r0
 800228e:	6021      	str	r1, [r4, #0]
 8002290:	e7ee      	b.n	8002270 <_free_r+0x20>
 8002292:	001a      	movs	r2, r3
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <_free_r+0x4e>
 800229a:	42a3      	cmp	r3, r4
 800229c:	d9f9      	bls.n	8002292 <_free_r+0x42>
 800229e:	6811      	ldr	r1, [r2, #0]
 80022a0:	1850      	adds	r0, r2, r1
 80022a2:	42a0      	cmp	r0, r4
 80022a4:	d10b      	bne.n	80022be <_free_r+0x6e>
 80022a6:	6820      	ldr	r0, [r4, #0]
 80022a8:	1809      	adds	r1, r1, r0
 80022aa:	1850      	adds	r0, r2, r1
 80022ac:	6011      	str	r1, [r2, #0]
 80022ae:	4283      	cmp	r3, r0
 80022b0:	d1e0      	bne.n	8002274 <_free_r+0x24>
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	1841      	adds	r1, r0, r1
 80022b8:	6011      	str	r1, [r2, #0]
 80022ba:	6053      	str	r3, [r2, #4]
 80022bc:	e7da      	b.n	8002274 <_free_r+0x24>
 80022be:	42a0      	cmp	r0, r4
 80022c0:	d902      	bls.n	80022c8 <_free_r+0x78>
 80022c2:	230c      	movs	r3, #12
 80022c4:	602b      	str	r3, [r5, #0]
 80022c6:	e7d5      	b.n	8002274 <_free_r+0x24>
 80022c8:	6820      	ldr	r0, [r4, #0]
 80022ca:	1821      	adds	r1, r4, r0
 80022cc:	428b      	cmp	r3, r1
 80022ce:	d103      	bne.n	80022d8 <_free_r+0x88>
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	1809      	adds	r1, r1, r0
 80022d6:	6021      	str	r1, [r4, #0]
 80022d8:	6063      	str	r3, [r4, #4]
 80022da:	6054      	str	r4, [r2, #4]
 80022dc:	e7ca      	b.n	8002274 <_free_r+0x24>
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	20000284 	.word	0x20000284

080022e4 <sbrk_aligned>:
 80022e4:	b570      	push	{r4, r5, r6, lr}
 80022e6:	4e0f      	ldr	r6, [pc, #60]	@ (8002324 <sbrk_aligned+0x40>)
 80022e8:	000d      	movs	r5, r1
 80022ea:	6831      	ldr	r1, [r6, #0]
 80022ec:	0004      	movs	r4, r0
 80022ee:	2900      	cmp	r1, #0
 80022f0:	d102      	bne.n	80022f8 <sbrk_aligned+0x14>
 80022f2:	f000 fb95 	bl	8002a20 <_sbrk_r>
 80022f6:	6030      	str	r0, [r6, #0]
 80022f8:	0029      	movs	r1, r5
 80022fa:	0020      	movs	r0, r4
 80022fc:	f000 fb90 	bl	8002a20 <_sbrk_r>
 8002300:	1c43      	adds	r3, r0, #1
 8002302:	d103      	bne.n	800230c <sbrk_aligned+0x28>
 8002304:	2501      	movs	r5, #1
 8002306:	426d      	negs	r5, r5
 8002308:	0028      	movs	r0, r5
 800230a:	bd70      	pop	{r4, r5, r6, pc}
 800230c:	2303      	movs	r3, #3
 800230e:	1cc5      	adds	r5, r0, #3
 8002310:	439d      	bics	r5, r3
 8002312:	42a8      	cmp	r0, r5
 8002314:	d0f8      	beq.n	8002308 <sbrk_aligned+0x24>
 8002316:	1a29      	subs	r1, r5, r0
 8002318:	0020      	movs	r0, r4
 800231a:	f000 fb81 	bl	8002a20 <_sbrk_r>
 800231e:	3001      	adds	r0, #1
 8002320:	d1f2      	bne.n	8002308 <sbrk_aligned+0x24>
 8002322:	e7ef      	b.n	8002304 <sbrk_aligned+0x20>
 8002324:	20000280 	.word	0x20000280

08002328 <_malloc_r>:
 8002328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800232a:	2203      	movs	r2, #3
 800232c:	1ccb      	adds	r3, r1, #3
 800232e:	4393      	bics	r3, r2
 8002330:	3308      	adds	r3, #8
 8002332:	0005      	movs	r5, r0
 8002334:	001f      	movs	r7, r3
 8002336:	2b0c      	cmp	r3, #12
 8002338:	d234      	bcs.n	80023a4 <_malloc_r+0x7c>
 800233a:	270c      	movs	r7, #12
 800233c:	42b9      	cmp	r1, r7
 800233e:	d833      	bhi.n	80023a8 <_malloc_r+0x80>
 8002340:	0028      	movs	r0, r5
 8002342:	f000 f871 	bl	8002428 <__malloc_lock>
 8002346:	4e37      	ldr	r6, [pc, #220]	@ (8002424 <_malloc_r+0xfc>)
 8002348:	6833      	ldr	r3, [r6, #0]
 800234a:	001c      	movs	r4, r3
 800234c:	2c00      	cmp	r4, #0
 800234e:	d12f      	bne.n	80023b0 <_malloc_r+0x88>
 8002350:	0039      	movs	r1, r7
 8002352:	0028      	movs	r0, r5
 8002354:	f7ff ffc6 	bl	80022e4 <sbrk_aligned>
 8002358:	0004      	movs	r4, r0
 800235a:	1c43      	adds	r3, r0, #1
 800235c:	d15f      	bne.n	800241e <_malloc_r+0xf6>
 800235e:	6834      	ldr	r4, [r6, #0]
 8002360:	9400      	str	r4, [sp, #0]
 8002362:	9b00      	ldr	r3, [sp, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d14a      	bne.n	80023fe <_malloc_r+0xd6>
 8002368:	2c00      	cmp	r4, #0
 800236a:	d052      	beq.n	8002412 <_malloc_r+0xea>
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	0028      	movs	r0, r5
 8002370:	18e3      	adds	r3, r4, r3
 8002372:	9900      	ldr	r1, [sp, #0]
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	f000 fb53 	bl	8002a20 <_sbrk_r>
 800237a:	9b01      	ldr	r3, [sp, #4]
 800237c:	4283      	cmp	r3, r0
 800237e:	d148      	bne.n	8002412 <_malloc_r+0xea>
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	0028      	movs	r0, r5
 8002384:	1aff      	subs	r7, r7, r3
 8002386:	0039      	movs	r1, r7
 8002388:	f7ff ffac 	bl	80022e4 <sbrk_aligned>
 800238c:	3001      	adds	r0, #1
 800238e:	d040      	beq.n	8002412 <_malloc_r+0xea>
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	19db      	adds	r3, r3, r7
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	6833      	ldr	r3, [r6, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	2a00      	cmp	r2, #0
 800239c:	d133      	bne.n	8002406 <_malloc_r+0xde>
 800239e:	9b00      	ldr	r3, [sp, #0]
 80023a0:	6033      	str	r3, [r6, #0]
 80023a2:	e019      	b.n	80023d8 <_malloc_r+0xb0>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	dac9      	bge.n	800233c <_malloc_r+0x14>
 80023a8:	230c      	movs	r3, #12
 80023aa:	602b      	str	r3, [r5, #0]
 80023ac:	2000      	movs	r0, #0
 80023ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023b0:	6821      	ldr	r1, [r4, #0]
 80023b2:	1bc9      	subs	r1, r1, r7
 80023b4:	d420      	bmi.n	80023f8 <_malloc_r+0xd0>
 80023b6:	290b      	cmp	r1, #11
 80023b8:	d90a      	bls.n	80023d0 <_malloc_r+0xa8>
 80023ba:	19e2      	adds	r2, r4, r7
 80023bc:	6027      	str	r7, [r4, #0]
 80023be:	42a3      	cmp	r3, r4
 80023c0:	d104      	bne.n	80023cc <_malloc_r+0xa4>
 80023c2:	6032      	str	r2, [r6, #0]
 80023c4:	6863      	ldr	r3, [r4, #4]
 80023c6:	6011      	str	r1, [r2, #0]
 80023c8:	6053      	str	r3, [r2, #4]
 80023ca:	e005      	b.n	80023d8 <_malloc_r+0xb0>
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	e7f9      	b.n	80023c4 <_malloc_r+0x9c>
 80023d0:	6862      	ldr	r2, [r4, #4]
 80023d2:	42a3      	cmp	r3, r4
 80023d4:	d10e      	bne.n	80023f4 <_malloc_r+0xcc>
 80023d6:	6032      	str	r2, [r6, #0]
 80023d8:	0028      	movs	r0, r5
 80023da:	f000 f82d 	bl	8002438 <__malloc_unlock>
 80023de:	0020      	movs	r0, r4
 80023e0:	2207      	movs	r2, #7
 80023e2:	300b      	adds	r0, #11
 80023e4:	1d23      	adds	r3, r4, #4
 80023e6:	4390      	bics	r0, r2
 80023e8:	1ac2      	subs	r2, r0, r3
 80023ea:	4298      	cmp	r0, r3
 80023ec:	d0df      	beq.n	80023ae <_malloc_r+0x86>
 80023ee:	1a1b      	subs	r3, r3, r0
 80023f0:	50a3      	str	r3, [r4, r2]
 80023f2:	e7dc      	b.n	80023ae <_malloc_r+0x86>
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	e7ef      	b.n	80023d8 <_malloc_r+0xb0>
 80023f8:	0023      	movs	r3, r4
 80023fa:	6864      	ldr	r4, [r4, #4]
 80023fc:	e7a6      	b.n	800234c <_malloc_r+0x24>
 80023fe:	9c00      	ldr	r4, [sp, #0]
 8002400:	6863      	ldr	r3, [r4, #4]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	e7ad      	b.n	8002362 <_malloc_r+0x3a>
 8002406:	001a      	movs	r2, r3
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	42a3      	cmp	r3, r4
 800240c:	d1fb      	bne.n	8002406 <_malloc_r+0xde>
 800240e:	2300      	movs	r3, #0
 8002410:	e7da      	b.n	80023c8 <_malloc_r+0xa0>
 8002412:	230c      	movs	r3, #12
 8002414:	0028      	movs	r0, r5
 8002416:	602b      	str	r3, [r5, #0]
 8002418:	f000 f80e 	bl	8002438 <__malloc_unlock>
 800241c:	e7c6      	b.n	80023ac <_malloc_r+0x84>
 800241e:	6007      	str	r7, [r0, #0]
 8002420:	e7da      	b.n	80023d8 <_malloc_r+0xb0>
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	20000284 	.word	0x20000284

08002428 <__malloc_lock>:
 8002428:	b510      	push	{r4, lr}
 800242a:	4802      	ldr	r0, [pc, #8]	@ (8002434 <__malloc_lock+0xc>)
 800242c:	f7ff ff0e 	bl	800224c <__retarget_lock_acquire_recursive>
 8002430:	bd10      	pop	{r4, pc}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	2000027c 	.word	0x2000027c

08002438 <__malloc_unlock>:
 8002438:	b510      	push	{r4, lr}
 800243a:	4802      	ldr	r0, [pc, #8]	@ (8002444 <__malloc_unlock+0xc>)
 800243c:	f7ff ff07 	bl	800224e <__retarget_lock_release_recursive>
 8002440:	bd10      	pop	{r4, pc}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	2000027c 	.word	0x2000027c

08002448 <__ssputs_r>:
 8002448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244a:	688e      	ldr	r6, [r1, #8]
 800244c:	b085      	sub	sp, #20
 800244e:	001f      	movs	r7, r3
 8002450:	000c      	movs	r4, r1
 8002452:	680b      	ldr	r3, [r1, #0]
 8002454:	9002      	str	r0, [sp, #8]
 8002456:	9203      	str	r2, [sp, #12]
 8002458:	42be      	cmp	r6, r7
 800245a:	d830      	bhi.n	80024be <__ssputs_r+0x76>
 800245c:	210c      	movs	r1, #12
 800245e:	5e62      	ldrsh	r2, [r4, r1]
 8002460:	2190      	movs	r1, #144	@ 0x90
 8002462:	00c9      	lsls	r1, r1, #3
 8002464:	420a      	tst	r2, r1
 8002466:	d028      	beq.n	80024ba <__ssputs_r+0x72>
 8002468:	2003      	movs	r0, #3
 800246a:	6921      	ldr	r1, [r4, #16]
 800246c:	1a5b      	subs	r3, r3, r1
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	6963      	ldr	r3, [r4, #20]
 8002472:	4343      	muls	r3, r0
 8002474:	9801      	ldr	r0, [sp, #4]
 8002476:	0fdd      	lsrs	r5, r3, #31
 8002478:	18ed      	adds	r5, r5, r3
 800247a:	1c7b      	adds	r3, r7, #1
 800247c:	181b      	adds	r3, r3, r0
 800247e:	106d      	asrs	r5, r5, #1
 8002480:	42ab      	cmp	r3, r5
 8002482:	d900      	bls.n	8002486 <__ssputs_r+0x3e>
 8002484:	001d      	movs	r5, r3
 8002486:	0552      	lsls	r2, r2, #21
 8002488:	d528      	bpl.n	80024dc <__ssputs_r+0x94>
 800248a:	0029      	movs	r1, r5
 800248c:	9802      	ldr	r0, [sp, #8]
 800248e:	f7ff ff4b 	bl	8002328 <_malloc_r>
 8002492:	1e06      	subs	r6, r0, #0
 8002494:	d02c      	beq.n	80024f0 <__ssputs_r+0xa8>
 8002496:	9a01      	ldr	r2, [sp, #4]
 8002498:	6921      	ldr	r1, [r4, #16]
 800249a:	f000 fade 	bl	8002a5a <memcpy>
 800249e:	89a2      	ldrh	r2, [r4, #12]
 80024a0:	4b18      	ldr	r3, [pc, #96]	@ (8002504 <__ssputs_r+0xbc>)
 80024a2:	401a      	ands	r2, r3
 80024a4:	2380      	movs	r3, #128	@ 0x80
 80024a6:	4313      	orrs	r3, r2
 80024a8:	81a3      	strh	r3, [r4, #12]
 80024aa:	9b01      	ldr	r3, [sp, #4]
 80024ac:	6126      	str	r6, [r4, #16]
 80024ae:	18f6      	adds	r6, r6, r3
 80024b0:	6026      	str	r6, [r4, #0]
 80024b2:	003e      	movs	r6, r7
 80024b4:	6165      	str	r5, [r4, #20]
 80024b6:	1aed      	subs	r5, r5, r3
 80024b8:	60a5      	str	r5, [r4, #8]
 80024ba:	42be      	cmp	r6, r7
 80024bc:	d900      	bls.n	80024c0 <__ssputs_r+0x78>
 80024be:	003e      	movs	r6, r7
 80024c0:	0032      	movs	r2, r6
 80024c2:	9903      	ldr	r1, [sp, #12]
 80024c4:	6820      	ldr	r0, [r4, #0]
 80024c6:	f000 fa99 	bl	80029fc <memmove>
 80024ca:	2000      	movs	r0, #0
 80024cc:	68a3      	ldr	r3, [r4, #8]
 80024ce:	1b9b      	subs	r3, r3, r6
 80024d0:	60a3      	str	r3, [r4, #8]
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	199b      	adds	r3, r3, r6
 80024d6:	6023      	str	r3, [r4, #0]
 80024d8:	b005      	add	sp, #20
 80024da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024dc:	002a      	movs	r2, r5
 80024de:	9802      	ldr	r0, [sp, #8]
 80024e0:	f000 fac4 	bl	8002a6c <_realloc_r>
 80024e4:	1e06      	subs	r6, r0, #0
 80024e6:	d1e0      	bne.n	80024aa <__ssputs_r+0x62>
 80024e8:	6921      	ldr	r1, [r4, #16]
 80024ea:	9802      	ldr	r0, [sp, #8]
 80024ec:	f7ff feb0 	bl	8002250 <_free_r>
 80024f0:	230c      	movs	r3, #12
 80024f2:	2001      	movs	r0, #1
 80024f4:	9a02      	ldr	r2, [sp, #8]
 80024f6:	4240      	negs	r0, r0
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	89a2      	ldrh	r2, [r4, #12]
 80024fc:	3334      	adds	r3, #52	@ 0x34
 80024fe:	4313      	orrs	r3, r2
 8002500:	81a3      	strh	r3, [r4, #12]
 8002502:	e7e9      	b.n	80024d8 <__ssputs_r+0x90>
 8002504:	fffffb7f 	.word	0xfffffb7f

08002508 <_svfiprintf_r>:
 8002508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800250a:	b0a1      	sub	sp, #132	@ 0x84
 800250c:	9003      	str	r0, [sp, #12]
 800250e:	001d      	movs	r5, r3
 8002510:	898b      	ldrh	r3, [r1, #12]
 8002512:	000f      	movs	r7, r1
 8002514:	0016      	movs	r6, r2
 8002516:	061b      	lsls	r3, r3, #24
 8002518:	d511      	bpl.n	800253e <_svfiprintf_r+0x36>
 800251a:	690b      	ldr	r3, [r1, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10e      	bne.n	800253e <_svfiprintf_r+0x36>
 8002520:	2140      	movs	r1, #64	@ 0x40
 8002522:	f7ff ff01 	bl	8002328 <_malloc_r>
 8002526:	6038      	str	r0, [r7, #0]
 8002528:	6138      	str	r0, [r7, #16]
 800252a:	2800      	cmp	r0, #0
 800252c:	d105      	bne.n	800253a <_svfiprintf_r+0x32>
 800252e:	230c      	movs	r3, #12
 8002530:	9a03      	ldr	r2, [sp, #12]
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	2001      	movs	r0, #1
 8002536:	4240      	negs	r0, r0
 8002538:	e0cf      	b.n	80026da <_svfiprintf_r+0x1d2>
 800253a:	2340      	movs	r3, #64	@ 0x40
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	2300      	movs	r3, #0
 8002540:	ac08      	add	r4, sp, #32
 8002542:	6163      	str	r3, [r4, #20]
 8002544:	3320      	adds	r3, #32
 8002546:	7663      	strb	r3, [r4, #25]
 8002548:	3310      	adds	r3, #16
 800254a:	76a3      	strb	r3, [r4, #26]
 800254c:	9507      	str	r5, [sp, #28]
 800254e:	0035      	movs	r5, r6
 8002550:	782b      	ldrb	r3, [r5, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <_svfiprintf_r+0x52>
 8002556:	2b25      	cmp	r3, #37	@ 0x25
 8002558:	d148      	bne.n	80025ec <_svfiprintf_r+0xe4>
 800255a:	1bab      	subs	r3, r5, r6
 800255c:	9305      	str	r3, [sp, #20]
 800255e:	42b5      	cmp	r5, r6
 8002560:	d00b      	beq.n	800257a <_svfiprintf_r+0x72>
 8002562:	0032      	movs	r2, r6
 8002564:	0039      	movs	r1, r7
 8002566:	9803      	ldr	r0, [sp, #12]
 8002568:	f7ff ff6e 	bl	8002448 <__ssputs_r>
 800256c:	3001      	adds	r0, #1
 800256e:	d100      	bne.n	8002572 <_svfiprintf_r+0x6a>
 8002570:	e0ae      	b.n	80026d0 <_svfiprintf_r+0x1c8>
 8002572:	6963      	ldr	r3, [r4, #20]
 8002574:	9a05      	ldr	r2, [sp, #20]
 8002576:	189b      	adds	r3, r3, r2
 8002578:	6163      	str	r3, [r4, #20]
 800257a:	782b      	ldrb	r3, [r5, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d100      	bne.n	8002582 <_svfiprintf_r+0x7a>
 8002580:	e0a6      	b.n	80026d0 <_svfiprintf_r+0x1c8>
 8002582:	2201      	movs	r2, #1
 8002584:	2300      	movs	r3, #0
 8002586:	4252      	negs	r2, r2
 8002588:	6062      	str	r2, [r4, #4]
 800258a:	a904      	add	r1, sp, #16
 800258c:	3254      	adds	r2, #84	@ 0x54
 800258e:	1852      	adds	r2, r2, r1
 8002590:	1c6e      	adds	r6, r5, #1
 8002592:	6023      	str	r3, [r4, #0]
 8002594:	60e3      	str	r3, [r4, #12]
 8002596:	60a3      	str	r3, [r4, #8]
 8002598:	7013      	strb	r3, [r2, #0]
 800259a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800259c:	4b54      	ldr	r3, [pc, #336]	@ (80026f0 <_svfiprintf_r+0x1e8>)
 800259e:	2205      	movs	r2, #5
 80025a0:	0018      	movs	r0, r3
 80025a2:	7831      	ldrb	r1, [r6, #0]
 80025a4:	9305      	str	r3, [sp, #20]
 80025a6:	f000 fa4d 	bl	8002a44 <memchr>
 80025aa:	1c75      	adds	r5, r6, #1
 80025ac:	2800      	cmp	r0, #0
 80025ae:	d11f      	bne.n	80025f0 <_svfiprintf_r+0xe8>
 80025b0:	6822      	ldr	r2, [r4, #0]
 80025b2:	06d3      	lsls	r3, r2, #27
 80025b4:	d504      	bpl.n	80025c0 <_svfiprintf_r+0xb8>
 80025b6:	2353      	movs	r3, #83	@ 0x53
 80025b8:	a904      	add	r1, sp, #16
 80025ba:	185b      	adds	r3, r3, r1
 80025bc:	2120      	movs	r1, #32
 80025be:	7019      	strb	r1, [r3, #0]
 80025c0:	0713      	lsls	r3, r2, #28
 80025c2:	d504      	bpl.n	80025ce <_svfiprintf_r+0xc6>
 80025c4:	2353      	movs	r3, #83	@ 0x53
 80025c6:	a904      	add	r1, sp, #16
 80025c8:	185b      	adds	r3, r3, r1
 80025ca:	212b      	movs	r1, #43	@ 0x2b
 80025cc:	7019      	strb	r1, [r3, #0]
 80025ce:	7833      	ldrb	r3, [r6, #0]
 80025d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80025d2:	d016      	beq.n	8002602 <_svfiprintf_r+0xfa>
 80025d4:	0035      	movs	r5, r6
 80025d6:	2100      	movs	r1, #0
 80025d8:	200a      	movs	r0, #10
 80025da:	68e3      	ldr	r3, [r4, #12]
 80025dc:	782a      	ldrb	r2, [r5, #0]
 80025de:	1c6e      	adds	r6, r5, #1
 80025e0:	3a30      	subs	r2, #48	@ 0x30
 80025e2:	2a09      	cmp	r2, #9
 80025e4:	d950      	bls.n	8002688 <_svfiprintf_r+0x180>
 80025e6:	2900      	cmp	r1, #0
 80025e8:	d111      	bne.n	800260e <_svfiprintf_r+0x106>
 80025ea:	e017      	b.n	800261c <_svfiprintf_r+0x114>
 80025ec:	3501      	adds	r5, #1
 80025ee:	e7af      	b.n	8002550 <_svfiprintf_r+0x48>
 80025f0:	9b05      	ldr	r3, [sp, #20]
 80025f2:	6822      	ldr	r2, [r4, #0]
 80025f4:	1ac0      	subs	r0, r0, r3
 80025f6:	2301      	movs	r3, #1
 80025f8:	4083      	lsls	r3, r0
 80025fa:	4313      	orrs	r3, r2
 80025fc:	002e      	movs	r6, r5
 80025fe:	6023      	str	r3, [r4, #0]
 8002600:	e7cc      	b.n	800259c <_svfiprintf_r+0x94>
 8002602:	9b07      	ldr	r3, [sp, #28]
 8002604:	1d19      	adds	r1, r3, #4
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	9107      	str	r1, [sp, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	db01      	blt.n	8002612 <_svfiprintf_r+0x10a>
 800260e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002610:	e004      	b.n	800261c <_svfiprintf_r+0x114>
 8002612:	425b      	negs	r3, r3
 8002614:	60e3      	str	r3, [r4, #12]
 8002616:	2302      	movs	r3, #2
 8002618:	4313      	orrs	r3, r2
 800261a:	6023      	str	r3, [r4, #0]
 800261c:	782b      	ldrb	r3, [r5, #0]
 800261e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002620:	d10c      	bne.n	800263c <_svfiprintf_r+0x134>
 8002622:	786b      	ldrb	r3, [r5, #1]
 8002624:	2b2a      	cmp	r3, #42	@ 0x2a
 8002626:	d134      	bne.n	8002692 <_svfiprintf_r+0x18a>
 8002628:	9b07      	ldr	r3, [sp, #28]
 800262a:	3502      	adds	r5, #2
 800262c:	1d1a      	adds	r2, r3, #4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	9207      	str	r2, [sp, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	da01      	bge.n	800263a <_svfiprintf_r+0x132>
 8002636:	2301      	movs	r3, #1
 8002638:	425b      	negs	r3, r3
 800263a:	9309      	str	r3, [sp, #36]	@ 0x24
 800263c:	4e2d      	ldr	r6, [pc, #180]	@ (80026f4 <_svfiprintf_r+0x1ec>)
 800263e:	2203      	movs	r2, #3
 8002640:	0030      	movs	r0, r6
 8002642:	7829      	ldrb	r1, [r5, #0]
 8002644:	f000 f9fe 	bl	8002a44 <memchr>
 8002648:	2800      	cmp	r0, #0
 800264a:	d006      	beq.n	800265a <_svfiprintf_r+0x152>
 800264c:	2340      	movs	r3, #64	@ 0x40
 800264e:	1b80      	subs	r0, r0, r6
 8002650:	4083      	lsls	r3, r0
 8002652:	6822      	ldr	r2, [r4, #0]
 8002654:	3501      	adds	r5, #1
 8002656:	4313      	orrs	r3, r2
 8002658:	6023      	str	r3, [r4, #0]
 800265a:	7829      	ldrb	r1, [r5, #0]
 800265c:	2206      	movs	r2, #6
 800265e:	4826      	ldr	r0, [pc, #152]	@ (80026f8 <_svfiprintf_r+0x1f0>)
 8002660:	1c6e      	adds	r6, r5, #1
 8002662:	7621      	strb	r1, [r4, #24]
 8002664:	f000 f9ee 	bl	8002a44 <memchr>
 8002668:	2800      	cmp	r0, #0
 800266a:	d038      	beq.n	80026de <_svfiprintf_r+0x1d6>
 800266c:	4b23      	ldr	r3, [pc, #140]	@ (80026fc <_svfiprintf_r+0x1f4>)
 800266e:	2b00      	cmp	r3, #0
 8002670:	d122      	bne.n	80026b8 <_svfiprintf_r+0x1b0>
 8002672:	2207      	movs	r2, #7
 8002674:	9b07      	ldr	r3, [sp, #28]
 8002676:	3307      	adds	r3, #7
 8002678:	4393      	bics	r3, r2
 800267a:	3308      	adds	r3, #8
 800267c:	9307      	str	r3, [sp, #28]
 800267e:	6963      	ldr	r3, [r4, #20]
 8002680:	9a04      	ldr	r2, [sp, #16]
 8002682:	189b      	adds	r3, r3, r2
 8002684:	6163      	str	r3, [r4, #20]
 8002686:	e762      	b.n	800254e <_svfiprintf_r+0x46>
 8002688:	4343      	muls	r3, r0
 800268a:	0035      	movs	r5, r6
 800268c:	2101      	movs	r1, #1
 800268e:	189b      	adds	r3, r3, r2
 8002690:	e7a4      	b.n	80025dc <_svfiprintf_r+0xd4>
 8002692:	2300      	movs	r3, #0
 8002694:	200a      	movs	r0, #10
 8002696:	0019      	movs	r1, r3
 8002698:	3501      	adds	r5, #1
 800269a:	6063      	str	r3, [r4, #4]
 800269c:	782a      	ldrb	r2, [r5, #0]
 800269e:	1c6e      	adds	r6, r5, #1
 80026a0:	3a30      	subs	r2, #48	@ 0x30
 80026a2:	2a09      	cmp	r2, #9
 80026a4:	d903      	bls.n	80026ae <_svfiprintf_r+0x1a6>
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0c8      	beq.n	800263c <_svfiprintf_r+0x134>
 80026aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80026ac:	e7c6      	b.n	800263c <_svfiprintf_r+0x134>
 80026ae:	4341      	muls	r1, r0
 80026b0:	0035      	movs	r5, r6
 80026b2:	2301      	movs	r3, #1
 80026b4:	1889      	adds	r1, r1, r2
 80026b6:	e7f1      	b.n	800269c <_svfiprintf_r+0x194>
 80026b8:	aa07      	add	r2, sp, #28
 80026ba:	9200      	str	r2, [sp, #0]
 80026bc:	0021      	movs	r1, r4
 80026be:	003a      	movs	r2, r7
 80026c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002700 <_svfiprintf_r+0x1f8>)
 80026c2:	9803      	ldr	r0, [sp, #12]
 80026c4:	e000      	b.n	80026c8 <_svfiprintf_r+0x1c0>
 80026c6:	bf00      	nop
 80026c8:	9004      	str	r0, [sp, #16]
 80026ca:	9b04      	ldr	r3, [sp, #16]
 80026cc:	3301      	adds	r3, #1
 80026ce:	d1d6      	bne.n	800267e <_svfiprintf_r+0x176>
 80026d0:	89bb      	ldrh	r3, [r7, #12]
 80026d2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80026d4:	065b      	lsls	r3, r3, #25
 80026d6:	d500      	bpl.n	80026da <_svfiprintf_r+0x1d2>
 80026d8:	e72c      	b.n	8002534 <_svfiprintf_r+0x2c>
 80026da:	b021      	add	sp, #132	@ 0x84
 80026dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026de:	aa07      	add	r2, sp, #28
 80026e0:	9200      	str	r2, [sp, #0]
 80026e2:	0021      	movs	r1, r4
 80026e4:	003a      	movs	r2, r7
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <_svfiprintf_r+0x1f8>)
 80026e8:	9803      	ldr	r0, [sp, #12]
 80026ea:	f000 f87b 	bl	80027e4 <_printf_i>
 80026ee:	e7eb      	b.n	80026c8 <_svfiprintf_r+0x1c0>
 80026f0:	08002b60 	.word	0x08002b60
 80026f4:	08002b66 	.word	0x08002b66
 80026f8:	08002b6a 	.word	0x08002b6a
 80026fc:	00000000 	.word	0x00000000
 8002700:	08002449 	.word	0x08002449

08002704 <_printf_common>:
 8002704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002706:	0016      	movs	r6, r2
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	688a      	ldr	r2, [r1, #8]
 800270c:	690b      	ldr	r3, [r1, #16]
 800270e:	000c      	movs	r4, r1
 8002710:	9000      	str	r0, [sp, #0]
 8002712:	4293      	cmp	r3, r2
 8002714:	da00      	bge.n	8002718 <_printf_common+0x14>
 8002716:	0013      	movs	r3, r2
 8002718:	0022      	movs	r2, r4
 800271a:	6033      	str	r3, [r6, #0]
 800271c:	3243      	adds	r2, #67	@ 0x43
 800271e:	7812      	ldrb	r2, [r2, #0]
 8002720:	2a00      	cmp	r2, #0
 8002722:	d001      	beq.n	8002728 <_printf_common+0x24>
 8002724:	3301      	adds	r3, #1
 8002726:	6033      	str	r3, [r6, #0]
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	069b      	lsls	r3, r3, #26
 800272c:	d502      	bpl.n	8002734 <_printf_common+0x30>
 800272e:	6833      	ldr	r3, [r6, #0]
 8002730:	3302      	adds	r3, #2
 8002732:	6033      	str	r3, [r6, #0]
 8002734:	6822      	ldr	r2, [r4, #0]
 8002736:	2306      	movs	r3, #6
 8002738:	0015      	movs	r5, r2
 800273a:	401d      	ands	r5, r3
 800273c:	421a      	tst	r2, r3
 800273e:	d027      	beq.n	8002790 <_printf_common+0x8c>
 8002740:	0023      	movs	r3, r4
 8002742:	3343      	adds	r3, #67	@ 0x43
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	1e5a      	subs	r2, r3, #1
 8002748:	4193      	sbcs	r3, r2
 800274a:	6822      	ldr	r2, [r4, #0]
 800274c:	0692      	lsls	r2, r2, #26
 800274e:	d430      	bmi.n	80027b2 <_printf_common+0xae>
 8002750:	0022      	movs	r2, r4
 8002752:	9901      	ldr	r1, [sp, #4]
 8002754:	9800      	ldr	r0, [sp, #0]
 8002756:	9d08      	ldr	r5, [sp, #32]
 8002758:	3243      	adds	r2, #67	@ 0x43
 800275a:	47a8      	blx	r5
 800275c:	3001      	adds	r0, #1
 800275e:	d025      	beq.n	80027ac <_printf_common+0xa8>
 8002760:	2206      	movs	r2, #6
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	2500      	movs	r5, #0
 8002766:	4013      	ands	r3, r2
 8002768:	2b04      	cmp	r3, #4
 800276a:	d105      	bne.n	8002778 <_printf_common+0x74>
 800276c:	6833      	ldr	r3, [r6, #0]
 800276e:	68e5      	ldr	r5, [r4, #12]
 8002770:	1aed      	subs	r5, r5, r3
 8002772:	43eb      	mvns	r3, r5
 8002774:	17db      	asrs	r3, r3, #31
 8002776:	401d      	ands	r5, r3
 8002778:	68a3      	ldr	r3, [r4, #8]
 800277a:	6922      	ldr	r2, [r4, #16]
 800277c:	4293      	cmp	r3, r2
 800277e:	dd01      	ble.n	8002784 <_printf_common+0x80>
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	18ed      	adds	r5, r5, r3
 8002784:	2600      	movs	r6, #0
 8002786:	42b5      	cmp	r5, r6
 8002788:	d120      	bne.n	80027cc <_printf_common+0xc8>
 800278a:	2000      	movs	r0, #0
 800278c:	e010      	b.n	80027b0 <_printf_common+0xac>
 800278e:	3501      	adds	r5, #1
 8002790:	68e3      	ldr	r3, [r4, #12]
 8002792:	6832      	ldr	r2, [r6, #0]
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	42ab      	cmp	r3, r5
 8002798:	ddd2      	ble.n	8002740 <_printf_common+0x3c>
 800279a:	0022      	movs	r2, r4
 800279c:	2301      	movs	r3, #1
 800279e:	9901      	ldr	r1, [sp, #4]
 80027a0:	9800      	ldr	r0, [sp, #0]
 80027a2:	9f08      	ldr	r7, [sp, #32]
 80027a4:	3219      	adds	r2, #25
 80027a6:	47b8      	blx	r7
 80027a8:	3001      	adds	r0, #1
 80027aa:	d1f0      	bne.n	800278e <_printf_common+0x8a>
 80027ac:	2001      	movs	r0, #1
 80027ae:	4240      	negs	r0, r0
 80027b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80027b2:	2030      	movs	r0, #48	@ 0x30
 80027b4:	18e1      	adds	r1, r4, r3
 80027b6:	3143      	adds	r1, #67	@ 0x43
 80027b8:	7008      	strb	r0, [r1, #0]
 80027ba:	0021      	movs	r1, r4
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	3145      	adds	r1, #69	@ 0x45
 80027c0:	7809      	ldrb	r1, [r1, #0]
 80027c2:	18a2      	adds	r2, r4, r2
 80027c4:	3243      	adds	r2, #67	@ 0x43
 80027c6:	3302      	adds	r3, #2
 80027c8:	7011      	strb	r1, [r2, #0]
 80027ca:	e7c1      	b.n	8002750 <_printf_common+0x4c>
 80027cc:	0022      	movs	r2, r4
 80027ce:	2301      	movs	r3, #1
 80027d0:	9901      	ldr	r1, [sp, #4]
 80027d2:	9800      	ldr	r0, [sp, #0]
 80027d4:	9f08      	ldr	r7, [sp, #32]
 80027d6:	321a      	adds	r2, #26
 80027d8:	47b8      	blx	r7
 80027da:	3001      	adds	r0, #1
 80027dc:	d0e6      	beq.n	80027ac <_printf_common+0xa8>
 80027de:	3601      	adds	r6, #1
 80027e0:	e7d1      	b.n	8002786 <_printf_common+0x82>
	...

080027e4 <_printf_i>:
 80027e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e6:	b08b      	sub	sp, #44	@ 0x2c
 80027e8:	9206      	str	r2, [sp, #24]
 80027ea:	000a      	movs	r2, r1
 80027ec:	3243      	adds	r2, #67	@ 0x43
 80027ee:	9307      	str	r3, [sp, #28]
 80027f0:	9005      	str	r0, [sp, #20]
 80027f2:	9203      	str	r2, [sp, #12]
 80027f4:	7e0a      	ldrb	r2, [r1, #24]
 80027f6:	000c      	movs	r4, r1
 80027f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80027fa:	2a78      	cmp	r2, #120	@ 0x78
 80027fc:	d809      	bhi.n	8002812 <_printf_i+0x2e>
 80027fe:	2a62      	cmp	r2, #98	@ 0x62
 8002800:	d80b      	bhi.n	800281a <_printf_i+0x36>
 8002802:	2a00      	cmp	r2, #0
 8002804:	d100      	bne.n	8002808 <_printf_i+0x24>
 8002806:	e0ba      	b.n	800297e <_printf_i+0x19a>
 8002808:	497a      	ldr	r1, [pc, #488]	@ (80029f4 <_printf_i+0x210>)
 800280a:	9104      	str	r1, [sp, #16]
 800280c:	2a58      	cmp	r2, #88	@ 0x58
 800280e:	d100      	bne.n	8002812 <_printf_i+0x2e>
 8002810:	e08e      	b.n	8002930 <_printf_i+0x14c>
 8002812:	0025      	movs	r5, r4
 8002814:	3542      	adds	r5, #66	@ 0x42
 8002816:	702a      	strb	r2, [r5, #0]
 8002818:	e022      	b.n	8002860 <_printf_i+0x7c>
 800281a:	0010      	movs	r0, r2
 800281c:	3863      	subs	r0, #99	@ 0x63
 800281e:	2815      	cmp	r0, #21
 8002820:	d8f7      	bhi.n	8002812 <_printf_i+0x2e>
 8002822:	f7fd fc71 	bl	8000108 <__gnu_thumb1_case_shi>
 8002826:	0016      	.short	0x0016
 8002828:	fff6001f 	.word	0xfff6001f
 800282c:	fff6fff6 	.word	0xfff6fff6
 8002830:	001ffff6 	.word	0x001ffff6
 8002834:	fff6fff6 	.word	0xfff6fff6
 8002838:	fff6fff6 	.word	0xfff6fff6
 800283c:	0036009f 	.word	0x0036009f
 8002840:	fff6007e 	.word	0xfff6007e
 8002844:	00b0fff6 	.word	0x00b0fff6
 8002848:	0036fff6 	.word	0x0036fff6
 800284c:	fff6fff6 	.word	0xfff6fff6
 8002850:	0082      	.short	0x0082
 8002852:	0025      	movs	r5, r4
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	3542      	adds	r5, #66	@ 0x42
 8002858:	1d11      	adds	r1, r2, #4
 800285a:	6019      	str	r1, [r3, #0]
 800285c:	6813      	ldr	r3, [r2, #0]
 800285e:	702b      	strb	r3, [r5, #0]
 8002860:	2301      	movs	r3, #1
 8002862:	e09e      	b.n	80029a2 <_printf_i+0x1be>
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	6809      	ldr	r1, [r1, #0]
 8002868:	1d02      	adds	r2, r0, #4
 800286a:	060d      	lsls	r5, r1, #24
 800286c:	d50b      	bpl.n	8002886 <_printf_i+0xa2>
 800286e:	6806      	ldr	r6, [r0, #0]
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	2e00      	cmp	r6, #0
 8002874:	da03      	bge.n	800287e <_printf_i+0x9a>
 8002876:	232d      	movs	r3, #45	@ 0x2d
 8002878:	9a03      	ldr	r2, [sp, #12]
 800287a:	4276      	negs	r6, r6
 800287c:	7013      	strb	r3, [r2, #0]
 800287e:	4b5d      	ldr	r3, [pc, #372]	@ (80029f4 <_printf_i+0x210>)
 8002880:	270a      	movs	r7, #10
 8002882:	9304      	str	r3, [sp, #16]
 8002884:	e018      	b.n	80028b8 <_printf_i+0xd4>
 8002886:	6806      	ldr	r6, [r0, #0]
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	0649      	lsls	r1, r1, #25
 800288c:	d5f1      	bpl.n	8002872 <_printf_i+0x8e>
 800288e:	b236      	sxth	r6, r6
 8002890:	e7ef      	b.n	8002872 <_printf_i+0x8e>
 8002892:	6808      	ldr	r0, [r1, #0]
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	c940      	ldmia	r1!, {r6}
 8002898:	0605      	lsls	r5, r0, #24
 800289a:	d402      	bmi.n	80028a2 <_printf_i+0xbe>
 800289c:	0640      	lsls	r0, r0, #25
 800289e:	d500      	bpl.n	80028a2 <_printf_i+0xbe>
 80028a0:	b2b6      	uxth	r6, r6
 80028a2:	6019      	str	r1, [r3, #0]
 80028a4:	4b53      	ldr	r3, [pc, #332]	@ (80029f4 <_printf_i+0x210>)
 80028a6:	270a      	movs	r7, #10
 80028a8:	9304      	str	r3, [sp, #16]
 80028aa:	2a6f      	cmp	r2, #111	@ 0x6f
 80028ac:	d100      	bne.n	80028b0 <_printf_i+0xcc>
 80028ae:	3f02      	subs	r7, #2
 80028b0:	0023      	movs	r3, r4
 80028b2:	2200      	movs	r2, #0
 80028b4:	3343      	adds	r3, #67	@ 0x43
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	6863      	ldr	r3, [r4, #4]
 80028ba:	60a3      	str	r3, [r4, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db06      	blt.n	80028ce <_printf_i+0xea>
 80028c0:	2104      	movs	r1, #4
 80028c2:	6822      	ldr	r2, [r4, #0]
 80028c4:	9d03      	ldr	r5, [sp, #12]
 80028c6:	438a      	bics	r2, r1
 80028c8:	6022      	str	r2, [r4, #0]
 80028ca:	4333      	orrs	r3, r6
 80028cc:	d00c      	beq.n	80028e8 <_printf_i+0x104>
 80028ce:	9d03      	ldr	r5, [sp, #12]
 80028d0:	0030      	movs	r0, r6
 80028d2:	0039      	movs	r1, r7
 80028d4:	f7fd fca8 	bl	8000228 <__aeabi_uidivmod>
 80028d8:	9b04      	ldr	r3, [sp, #16]
 80028da:	3d01      	subs	r5, #1
 80028dc:	5c5b      	ldrb	r3, [r3, r1]
 80028de:	702b      	strb	r3, [r5, #0]
 80028e0:	0033      	movs	r3, r6
 80028e2:	0006      	movs	r6, r0
 80028e4:	429f      	cmp	r7, r3
 80028e6:	d9f3      	bls.n	80028d0 <_printf_i+0xec>
 80028e8:	2f08      	cmp	r7, #8
 80028ea:	d109      	bne.n	8002900 <_printf_i+0x11c>
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	07db      	lsls	r3, r3, #31
 80028f0:	d506      	bpl.n	8002900 <_printf_i+0x11c>
 80028f2:	6862      	ldr	r2, [r4, #4]
 80028f4:	6923      	ldr	r3, [r4, #16]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	dc02      	bgt.n	8002900 <_printf_i+0x11c>
 80028fa:	2330      	movs	r3, #48	@ 0x30
 80028fc:	3d01      	subs	r5, #1
 80028fe:	702b      	strb	r3, [r5, #0]
 8002900:	9b03      	ldr	r3, [sp, #12]
 8002902:	1b5b      	subs	r3, r3, r5
 8002904:	6123      	str	r3, [r4, #16]
 8002906:	9b07      	ldr	r3, [sp, #28]
 8002908:	0021      	movs	r1, r4
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	9805      	ldr	r0, [sp, #20]
 800290e:	9b06      	ldr	r3, [sp, #24]
 8002910:	aa09      	add	r2, sp, #36	@ 0x24
 8002912:	f7ff fef7 	bl	8002704 <_printf_common>
 8002916:	3001      	adds	r0, #1
 8002918:	d148      	bne.n	80029ac <_printf_i+0x1c8>
 800291a:	2001      	movs	r0, #1
 800291c:	4240      	negs	r0, r0
 800291e:	b00b      	add	sp, #44	@ 0x2c
 8002920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002922:	2220      	movs	r2, #32
 8002924:	6809      	ldr	r1, [r1, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	6022      	str	r2, [r4, #0]
 800292a:	2278      	movs	r2, #120	@ 0x78
 800292c:	4932      	ldr	r1, [pc, #200]	@ (80029f8 <_printf_i+0x214>)
 800292e:	9104      	str	r1, [sp, #16]
 8002930:	0021      	movs	r1, r4
 8002932:	3145      	adds	r1, #69	@ 0x45
 8002934:	700a      	strb	r2, [r1, #0]
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	6822      	ldr	r2, [r4, #0]
 800293a:	c940      	ldmia	r1!, {r6}
 800293c:	0610      	lsls	r0, r2, #24
 800293e:	d402      	bmi.n	8002946 <_printf_i+0x162>
 8002940:	0650      	lsls	r0, r2, #25
 8002942:	d500      	bpl.n	8002946 <_printf_i+0x162>
 8002944:	b2b6      	uxth	r6, r6
 8002946:	6019      	str	r1, [r3, #0]
 8002948:	07d3      	lsls	r3, r2, #31
 800294a:	d502      	bpl.n	8002952 <_printf_i+0x16e>
 800294c:	2320      	movs	r3, #32
 800294e:	4313      	orrs	r3, r2
 8002950:	6023      	str	r3, [r4, #0]
 8002952:	2e00      	cmp	r6, #0
 8002954:	d001      	beq.n	800295a <_printf_i+0x176>
 8002956:	2710      	movs	r7, #16
 8002958:	e7aa      	b.n	80028b0 <_printf_i+0xcc>
 800295a:	2220      	movs	r2, #32
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	4393      	bics	r3, r2
 8002960:	6023      	str	r3, [r4, #0]
 8002962:	e7f8      	b.n	8002956 <_printf_i+0x172>
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	680d      	ldr	r5, [r1, #0]
 8002968:	1d10      	adds	r0, r2, #4
 800296a:	6949      	ldr	r1, [r1, #20]
 800296c:	6018      	str	r0, [r3, #0]
 800296e:	6813      	ldr	r3, [r2, #0]
 8002970:	062e      	lsls	r6, r5, #24
 8002972:	d501      	bpl.n	8002978 <_printf_i+0x194>
 8002974:	6019      	str	r1, [r3, #0]
 8002976:	e002      	b.n	800297e <_printf_i+0x19a>
 8002978:	066d      	lsls	r5, r5, #25
 800297a:	d5fb      	bpl.n	8002974 <_printf_i+0x190>
 800297c:	8019      	strh	r1, [r3, #0]
 800297e:	2300      	movs	r3, #0
 8002980:	9d03      	ldr	r5, [sp, #12]
 8002982:	6123      	str	r3, [r4, #16]
 8002984:	e7bf      	b.n	8002906 <_printf_i+0x122>
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	1d11      	adds	r1, r2, #4
 800298a:	6019      	str	r1, [r3, #0]
 800298c:	6815      	ldr	r5, [r2, #0]
 800298e:	2100      	movs	r1, #0
 8002990:	0028      	movs	r0, r5
 8002992:	6862      	ldr	r2, [r4, #4]
 8002994:	f000 f856 	bl	8002a44 <memchr>
 8002998:	2800      	cmp	r0, #0
 800299a:	d001      	beq.n	80029a0 <_printf_i+0x1bc>
 800299c:	1b40      	subs	r0, r0, r5
 800299e:	6060      	str	r0, [r4, #4]
 80029a0:	6863      	ldr	r3, [r4, #4]
 80029a2:	6123      	str	r3, [r4, #16]
 80029a4:	2300      	movs	r3, #0
 80029a6:	9a03      	ldr	r2, [sp, #12]
 80029a8:	7013      	strb	r3, [r2, #0]
 80029aa:	e7ac      	b.n	8002906 <_printf_i+0x122>
 80029ac:	002a      	movs	r2, r5
 80029ae:	6923      	ldr	r3, [r4, #16]
 80029b0:	9906      	ldr	r1, [sp, #24]
 80029b2:	9805      	ldr	r0, [sp, #20]
 80029b4:	9d07      	ldr	r5, [sp, #28]
 80029b6:	47a8      	blx	r5
 80029b8:	3001      	adds	r0, #1
 80029ba:	d0ae      	beq.n	800291a <_printf_i+0x136>
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	079b      	lsls	r3, r3, #30
 80029c0:	d415      	bmi.n	80029ee <_printf_i+0x20a>
 80029c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80029c4:	68e0      	ldr	r0, [r4, #12]
 80029c6:	4298      	cmp	r0, r3
 80029c8:	daa9      	bge.n	800291e <_printf_i+0x13a>
 80029ca:	0018      	movs	r0, r3
 80029cc:	e7a7      	b.n	800291e <_printf_i+0x13a>
 80029ce:	0022      	movs	r2, r4
 80029d0:	2301      	movs	r3, #1
 80029d2:	9906      	ldr	r1, [sp, #24]
 80029d4:	9805      	ldr	r0, [sp, #20]
 80029d6:	9e07      	ldr	r6, [sp, #28]
 80029d8:	3219      	adds	r2, #25
 80029da:	47b0      	blx	r6
 80029dc:	3001      	adds	r0, #1
 80029de:	d09c      	beq.n	800291a <_printf_i+0x136>
 80029e0:	3501      	adds	r5, #1
 80029e2:	68e3      	ldr	r3, [r4, #12]
 80029e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	42ab      	cmp	r3, r5
 80029ea:	dcf0      	bgt.n	80029ce <_printf_i+0x1ea>
 80029ec:	e7e9      	b.n	80029c2 <_printf_i+0x1de>
 80029ee:	2500      	movs	r5, #0
 80029f0:	e7f7      	b.n	80029e2 <_printf_i+0x1fe>
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	08002b71 	.word	0x08002b71
 80029f8:	08002b82 	.word	0x08002b82

080029fc <memmove>:
 80029fc:	b510      	push	{r4, lr}
 80029fe:	4288      	cmp	r0, r1
 8002a00:	d902      	bls.n	8002a08 <memmove+0xc>
 8002a02:	188b      	adds	r3, r1, r2
 8002a04:	4298      	cmp	r0, r3
 8002a06:	d308      	bcc.n	8002a1a <memmove+0x1e>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d007      	beq.n	8002a1e <memmove+0x22>
 8002a0e:	5ccc      	ldrb	r4, [r1, r3]
 8002a10:	54c4      	strb	r4, [r0, r3]
 8002a12:	3301      	adds	r3, #1
 8002a14:	e7f9      	b.n	8002a0a <memmove+0xe>
 8002a16:	5c8b      	ldrb	r3, [r1, r2]
 8002a18:	5483      	strb	r3, [r0, r2]
 8002a1a:	3a01      	subs	r2, #1
 8002a1c:	d2fb      	bcs.n	8002a16 <memmove+0x1a>
 8002a1e:	bd10      	pop	{r4, pc}

08002a20 <_sbrk_r>:
 8002a20:	2300      	movs	r3, #0
 8002a22:	b570      	push	{r4, r5, r6, lr}
 8002a24:	4d06      	ldr	r5, [pc, #24]	@ (8002a40 <_sbrk_r+0x20>)
 8002a26:	0004      	movs	r4, r0
 8002a28:	0008      	movs	r0, r1
 8002a2a:	602b      	str	r3, [r5, #0]
 8002a2c:	f7fd fdfa 	bl	8000624 <_sbrk>
 8002a30:	1c43      	adds	r3, r0, #1
 8002a32:	d103      	bne.n	8002a3c <_sbrk_r+0x1c>
 8002a34:	682b      	ldr	r3, [r5, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d000      	beq.n	8002a3c <_sbrk_r+0x1c>
 8002a3a:	6023      	str	r3, [r4, #0]
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	20000278 	.word	0x20000278

08002a44 <memchr>:
 8002a44:	b2c9      	uxtb	r1, r1
 8002a46:	1882      	adds	r2, r0, r2
 8002a48:	4290      	cmp	r0, r2
 8002a4a:	d101      	bne.n	8002a50 <memchr+0xc>
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	4770      	bx	lr
 8002a50:	7803      	ldrb	r3, [r0, #0]
 8002a52:	428b      	cmp	r3, r1
 8002a54:	d0fb      	beq.n	8002a4e <memchr+0xa>
 8002a56:	3001      	adds	r0, #1
 8002a58:	e7f6      	b.n	8002a48 <memchr+0x4>

08002a5a <memcpy>:
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	b510      	push	{r4, lr}
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d100      	bne.n	8002a64 <memcpy+0xa>
 8002a62:	bd10      	pop	{r4, pc}
 8002a64:	5ccc      	ldrb	r4, [r1, r3]
 8002a66:	54c4      	strb	r4, [r0, r3]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	e7f8      	b.n	8002a5e <memcpy+0x4>

08002a6c <_realloc_r>:
 8002a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a6e:	0006      	movs	r6, r0
 8002a70:	000c      	movs	r4, r1
 8002a72:	0015      	movs	r5, r2
 8002a74:	2900      	cmp	r1, #0
 8002a76:	d105      	bne.n	8002a84 <_realloc_r+0x18>
 8002a78:	0011      	movs	r1, r2
 8002a7a:	f7ff fc55 	bl	8002328 <_malloc_r>
 8002a7e:	0004      	movs	r4, r0
 8002a80:	0020      	movs	r0, r4
 8002a82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a84:	2a00      	cmp	r2, #0
 8002a86:	d103      	bne.n	8002a90 <_realloc_r+0x24>
 8002a88:	f7ff fbe2 	bl	8002250 <_free_r>
 8002a8c:	002c      	movs	r4, r5
 8002a8e:	e7f7      	b.n	8002a80 <_realloc_r+0x14>
 8002a90:	f000 f81c 	bl	8002acc <_malloc_usable_size_r>
 8002a94:	0007      	movs	r7, r0
 8002a96:	4285      	cmp	r5, r0
 8002a98:	d802      	bhi.n	8002aa0 <_realloc_r+0x34>
 8002a9a:	0843      	lsrs	r3, r0, #1
 8002a9c:	42ab      	cmp	r3, r5
 8002a9e:	d3ef      	bcc.n	8002a80 <_realloc_r+0x14>
 8002aa0:	0029      	movs	r1, r5
 8002aa2:	0030      	movs	r0, r6
 8002aa4:	f7ff fc40 	bl	8002328 <_malloc_r>
 8002aa8:	9001      	str	r0, [sp, #4]
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	d101      	bne.n	8002ab2 <_realloc_r+0x46>
 8002aae:	9c01      	ldr	r4, [sp, #4]
 8002ab0:	e7e6      	b.n	8002a80 <_realloc_r+0x14>
 8002ab2:	002a      	movs	r2, r5
 8002ab4:	42bd      	cmp	r5, r7
 8002ab6:	d900      	bls.n	8002aba <_realloc_r+0x4e>
 8002ab8:	003a      	movs	r2, r7
 8002aba:	0021      	movs	r1, r4
 8002abc:	9801      	ldr	r0, [sp, #4]
 8002abe:	f7ff ffcc 	bl	8002a5a <memcpy>
 8002ac2:	0021      	movs	r1, r4
 8002ac4:	0030      	movs	r0, r6
 8002ac6:	f7ff fbc3 	bl	8002250 <_free_r>
 8002aca:	e7f0      	b.n	8002aae <_realloc_r+0x42>

08002acc <_malloc_usable_size_r>:
 8002acc:	1f0b      	subs	r3, r1, #4
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	1f18      	subs	r0, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	da01      	bge.n	8002ada <_malloc_usable_size_r+0xe>
 8002ad6:	580b      	ldr	r3, [r1, r0]
 8002ad8:	18c0      	adds	r0, r0, r3
 8002ada:	4770      	bx	lr

08002adc <_init>:
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ade:	46c0      	nop			@ (mov r8, r8)
 8002ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae2:	bc08      	pop	{r3}
 8002ae4:	469e      	mov	lr, r3
 8002ae6:	4770      	bx	lr

08002ae8 <_fini>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	46c0      	nop			@ (mov r8, r8)
 8002aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aee:	bc08      	pop	{r3}
 8002af0:	469e      	mov	lr, r3
 8002af2:	4770      	bx	lr
